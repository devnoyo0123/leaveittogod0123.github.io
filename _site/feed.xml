<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leaveittogod0123's blog</title>
    <description>leaveittogod0123 Personal Website</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 22 Jul 2019 00:51:18 +0900</pubDate>
    <lastBuildDate>Mon, 22 Jul 2019 00:51:18 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title> 백준 15483 편집거리 알고리즘 풀이</title>
        <description>&lt;h1 id=&quot;목표-백준-15483-풀기&quot;&gt;목표: 백준 15483 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-mojave-1014-clion&quot;&gt;환경: mac OS Mojave 10.14, CLion&lt;/h3&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;

&lt;h4 id=&quot;문제이해&quot;&gt;문제이해&lt;/h4&gt;
&lt;p&gt;굉장히 유명한 편집 거리 알고리즘을 다이나믹 프로그래밍 문제로 풀이
DP를 모르는데 이 문제를 싸악 풀었으면 알고리즘 안해도 됌.&lt;br /&gt;
DP에 대해 모른다면 이해 자체가 안되는 문제&lt;/p&gt;

&lt;h4 id=&quot;문제접근&quot;&gt;문제접근&lt;/h4&gt;
&lt;p&gt;이게 왜 &lt;a href=&quot;https://www.acmicpc.net/workbook/view/1946&quot;&gt;단계별로 풀어보기 jh05013 Edition pt.1&lt;/a&gt; 에 들어가는지 전혀모르겠음.&lt;/p&gt;

&lt;p&gt;이 문제를 풀이하면서 고민했음. 풀이가 뭘까, 전혀 모르겠음. 모르겠음. 전혀 모르겠음. 검색했음.&lt;br /&gt;
블로그마다 편집거리 알고리즘이라 써있음. 편집거리 알고리즘 검색했음.&lt;/p&gt;

&lt;p&gt;그래서 인터넷에서 본 풀이를 정리함.
&lt;a href=&quot;https://www.geeksforgeeks.org/edit-distance-dp-5/&quot;&gt;the mighty geeksforgeeks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이 문제에서 작은 문제란 무엇인가?&lt;/p&gt;

&lt;p&gt;정리가 이해가 안된다면 geeksforgeeks 가서 그림을 보면 되죠.
또한 DP를 모른다면 코드플러스의 백준 강의를 들으면 되죠.&lt;/p&gt;

&lt;p&gt;이 아이디어는 두 문자열의 왼쪽 또는 오른쪽에서 쳐다보는 모든 문자를 하나씩 처리함.
오른쪽부터 보죠. 모든 문자 쌍을 순회할때 두가지의 경우의 수가 있죠.&lt;/p&gt;

&lt;p&gt;그전에 정의할 것&lt;br /&gt;
m : str1의 길이&lt;br /&gt;
n : str2의 길이&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;두 문자열의 마지막 문자가 같다? 
 m-1, n-1 이 작은 문제가 되죠.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;두 문장열의 마지막 문자가 다르다?
문제에서 주어진 대로&lt;br /&gt;
삽입&lt;br /&gt;
삭제&lt;br /&gt;
교체 
로 나눌 수 있죠.&lt;/p&gt;

    &lt;p&gt;삽입의 경우는 m 과 n-1의 작은 문제로 볼 수 있고&lt;br /&gt;
삭제의 경우는 m-1 과 n의 작은 문제로 볼 수 있고&lt;br /&gt;
교체의 경우는 m-1 과 n-1의 작은 문제로 볼 수 있죠.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;작은 문제로 나누어도 겹치는 경우의수가 매우 발생함.&lt;br /&gt;
시간복잡도가 O(3^m) 인 아주 뭣 같은 복잡도죠.&lt;/p&gt;

&lt;p&gt;고래서&lt;br /&gt;
DP를 무조건 사용하면 시간복잡도로 이득, bottom-up이든 top-down이든 똑같죠.
메모이제이션을 써야해요.&lt;/p&gt;

&lt;p&gt;시간복잡도O(n*m)에 해결해버림.&lt;/p&gt;

&lt;p&gt;나에겐 매우 어려운 문제였음…&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;string&amp;gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Utility function to find the minimum of three numbers &lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;editDistDP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Create a table to store results of subproblems &lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Fill d[][] in bottom up manner &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// If first string is empty, only option is to &lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// insert all characters of second string &lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Min. operations = j &lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// If second string is empty, only option is to&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// remove all characters of second string&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Min. operations = i &lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// If last characters are same, ignore last char&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// and recur for remaining string&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// If the last character is different, consider all&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// possibilities and find the minimum&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Insert &lt;/span&gt;
                                   &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Remove &lt;/span&gt;
                                   &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Replace &lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editDistDP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 10 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-07-10/BOJ15483</link>
        <guid isPermaLink="true">http://localhost:4000/2019-07-10/BOJ15483</guid>
        
        <category>백준 온라인 저지</category>
        
        
      </item>
    
      <item>
        <title> 백준 1351 풀이</title>
        <description>&lt;h1 id=&quot;목표-백준-1351-풀기&quot;&gt;목표: 백준 1351 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-mojave-1014-clion&quot;&gt;환경: mac OS Mojave 10.14, CLion&lt;/h3&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;

&lt;h4 id=&quot;문제이해&quot;&gt;문제이해&lt;/h4&gt;
&lt;p&gt;점화식이 주어진 DP 문제&lt;/p&gt;

&lt;h4 id=&quot;문제접근&quot;&gt;문제접근&lt;/h4&gt;
&lt;p&gt;DP의 두 가지 핵심 개념&lt;br /&gt;
overlapping subproblem : 작은 문제가 겹친다. ( 작은 문제가 여러 번 발생한다.)
optimal substructure : (어떻게 풀든 작은 문제의 답은 항상 같다. 그러니 가져다 쓸 수 있다.)&lt;/p&gt;

&lt;p&gt;이 두가지 개념을 가능하게 해주는 memoization 그냥
한번 풀이한 작은 문제는 또 풀이하지 않고, 가져다 쓰기.&lt;/p&gt;

&lt;p&gt;여기에 + 2가지.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;오개념 있었다. 정확히 말하면 그동안 코딩은 대충했다는 것&lt;br /&gt;
0을 0이 아닌 양의 정수로 나누는 연산이 에러인 줄 알았음.
n을 0으로 나누었을때 에러가 남.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보통 메모이제이션을 배열로 사용한다. 그러나 이 문제는 범위가 int 데이터 사이즈를 벗어난다.&lt;br /&gt;
long long 으로 인덱스를 주고싶다. 전에 string을 인덱스로 주고 싶을때는?&lt;br /&gt;
map을 사용했었다. 똑같다. int형이 아닌 값을 인덱스로 사용하고싶으면? map을 쓰자.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 10 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-07-10/BOJ1351</link>
        <guid isPermaLink="true">http://localhost:4000/2019-07-10/BOJ1351</guid>
        
        <category>백준 온라인 저지</category>
        
        
      </item>
    
      <item>
        <title> 백준 10866 풀이</title>
        <description>&lt;h1 id=&quot;목표-백준-10866-풀기&quot;&gt;목표: 백준 10866 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-mojave-1014-clion&quot;&gt;환경: mac OS Mojave 10.14, CLion&lt;/h3&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;

&lt;h4 id=&quot;문제이해&quot;&gt;문제이해&lt;/h4&gt;

&lt;p&gt;deque이란 자료구조 구현문제&lt;/p&gt;

&lt;h4 id=&quot;문제접근&quot;&gt;문제접근&lt;/h4&gt;

&lt;p&gt;N제한이 1만이라서, 2만짜리 배열을 만들어서 
연산은 string으로 입력받아서 if else 문으로 분기해서 풀었습니다.&lt;/p&gt;

&lt;p&gt;vector나 기타 stl로 구현하신분들도 있는데 그 방법이 더 나은것 같음… 또 바보짓함.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;push_back&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;push_front&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;back&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;front&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;empty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pop_back&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pop_front&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 09 Jul 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-07-09/BOJ10866</link>
        <guid isPermaLink="true">http://localhost:4000/2019-07-09/BOJ10866</guid>
        
        <category>백준 온라인 저지</category>
        
        
      </item>
    
      <item>
        <title> 백준 2164 풀이</title>
        <description>&lt;h1 id=&quot;목표-백준-2164-풀기&quot;&gt;목표: 백준 2164 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-mojave-1014-clion&quot;&gt;환경: mac OS Mojave 10.14, CLion&lt;/h3&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;

&lt;h4 id=&quot;문제이해&quot;&gt;문제이해&lt;/h4&gt;

&lt;p&gt;설명해준대로 구현하라 -&amp;gt; 시뮬레이션&lt;/p&gt;

&lt;h4 id=&quot;문제접근&quot;&gt;문제접근&lt;/h4&gt;

&lt;p&gt;N제한이 50만임. -&amp;gt; ( N^2 » 1억 )  -&amp;gt; 시간초과&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;deque&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;front&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 26 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-06-26/BOJ2164</link>
        <guid isPermaLink="true">http://localhost:4000/2019-06-26/BOJ2164</guid>
        
        <category>백준 온라인 저지</category>
        
        
      </item>
    
      <item>
        <title> 백준 11066 풀이</title>
        <description>&lt;h1 id=&quot;목표-백준-11066&quot;&gt;목표: 백준 11066&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-mojave-1014-clion&quot;&gt;환경: mac OS Mojave 10.14, CLion&lt;/h3&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;

&lt;p&gt;나한테는 대단히 어려웠던 문제, 그러나 정답률 52%&lt;/p&gt;

&lt;h4 id=&quot;문제이해&quot;&gt;문제이해&lt;/h4&gt;
&lt;p&gt;여러 장의 소설을 두 개씩 합쳐서 소설의 여러 장들이 연속이 되도록 파일을 합쳐서 최종적으로는 하나의 파일로 합친다.
파일을 합친 결과를 누적한다.&lt;/p&gt;

&lt;h4 id=&quot;문제접근&quot;&gt;문제접근&lt;/h4&gt;
&lt;p&gt;다이나믹프로그래밍 - 문제정의, 부분합 개념&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;algorithm&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pSum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 26 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-06-26/BOJ11066</link>
        <guid isPermaLink="true">http://localhost:4000/2019-06-26/BOJ11066</guid>
        
        <category>백준 온라인 저지</category>
        
        
      </item>
    
      <item>
        <title> 백준 1107 DFS로 문제 풀기 </title>
        <description>&lt;h1 id=&quot;목표-백준-1107-문제-풀기&quot;&gt;목표: 백준 1107 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-mojave-1014-visual-studio-2015&quot;&gt;환경: mac OS Mojave 10.14, Visual Studio 2015&lt;/h3&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;
&lt;p&gt;dfs(버튼을 누른횟수, 채널) 이란 함수를 정의해서
모든 경우의수를 계산하여 풀이했습니다.&lt;/p&gt;

&lt;p&gt;버튼을 누른횟수가 찾으려는 수의 자리수보다 크면 종료해야됩니다.
질문 검색을 통해 알아낸 결과, 이동하려는 채널보다 큰 수에서 - 버튼을 통해서
이동하는게 빠를 수도 있습니다.
그래서 재귀 종료조건을 아래와 같이 만들었습니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;dfs를 하면서 자리수를 앞에서부터 선택을 해줍니다. 
1234면 천자리, 백자리, 십자리, 일자리 순으로 선택합니다.&lt;/p&gt;

&lt;p&gt;해당 자리수에 누를 버튼을
for문을 돌면서 고장난 버튼이 아니면 버튼을 누르고
버튼을 누른 결과를 갱신하여 인자로 넘겨줬습니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;시간복잡도는 O(10^자리수)입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yobs0814/problemSolving/blob/master/SWExpert/BOJ/BOJ1107/%EC%86%8C%EC%8A%A4.cpp&quot;&gt;SourceCode&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Mar 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-03-24/BOJ1107</link>
        <guid isPermaLink="true">http://localhost:4000/2019-03-24/BOJ1107</guid>
        
        <category>SW 역량테스트</category>
        
        <category>백준 온라인 저지</category>
        
        <category>부르트포스</category>
        
        
      </item>
    
      <item>
        <title> SWexpertAcademy 2817 문제 풀기 </title>
        <description>&lt;h1 id=&quot;목표-swexpertacademy-2817-문제-풀기&quot;&gt;목표: SWexpertAcademy 2817 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-mojave-1014-clion&quot;&gt;환경: mac OS Mojave 10.14, CLion&lt;/h3&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;
&lt;p&gt;solve(인덱스, 누적합)라는 함수를 정의했습니다.
이 함수의 의미는 0번 인덱스부터 n-1번 인덱스까지 순차 탐색하면서
배열의 원소를 뽑냐? 안뽑냐 문제입니다. 전형적인 조합 문제입니다.&lt;/p&gt;

&lt;p&gt;solve() 함수의 스코프를 노드라고 생각하면
DFS로 볼 수도 있습니다.&lt;/p&gt;

&lt;p&gt;비슷한 문제로는
백준 &lt;a href=&quot;https://www.acmicpc.net/problem/1987&quot;&gt;알파벳&lt;/a&gt; 문제가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yobs0814/problemSolving/blob/master/SWExpert/SWEA2817/main.cpp&quot;&gt;SourceCode&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Feb 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-02-12/SWEA2817</link>
        <guid isPermaLink="true">http://localhost:4000/2019-02-12/SWEA2817</guid>
        
        <category>SW 역량테스트</category>
        
        <category>SWexpertAcademy</category>
        
        <category>부르트포스</category>
        
        
      </item>
    
      <item>
        <title> 백준 6549 스택을 통해 풀기 </title>
        <description>&lt;h1 id=&quot;목표-백준-6549-스택을-통해-풀기&quot;&gt;목표: 백준 6549 스택을 통해 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-mojave-1014-clion&quot;&gt;환경: mac OS Mojave 10.14, CLion&lt;/h3&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;
&lt;p&gt;(왼쪽부터 순서대로)0번 막대기부터 n-1번째까지 체크하면서&lt;/p&gt;

&lt;p&gt;stack이 비어있으면 stack에 push하고&lt;/p&gt;

&lt;p&gt;stack이 비어있지 않거나, 현재 체크하고 있는 막대기가&lt;/p&gt;

&lt;p&gt;stack의 top이 가리키는 막대기보다 더 작으면&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;pop하여 직사각형의 넓이를 구한다.&lt;/p&gt;

&lt;p&gt;0번부터 n-1번까지 모든 막대기를 체크했다면&lt;/p&gt;

&lt;p&gt;스택에 막대기가 존재하는지 보고 pop하면서 넓이를 구하고 최대넓이를 갱신한다.&lt;/p&gt;

&lt;p&gt;이 문제 풀이법은 오래 잡았으나 풀지 못해서 잘하시는 분들의 로직을 통해 이해했다.&lt;/p&gt;

&lt;h3 id=&quot;코딩-스킬&quot;&gt;코딩 스킬&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;처음 stack에 가상의 막대기 넣기:
너비를 구하는 것이기 때문에 좌우 길이를 구해야한다. 0번째 막대기는 왼쪽 기준이 없으므로,
처음에 -1번짜리 막대기를 넣어줌으로써 0번째 막대기까지 계산하는 로직을 코딩하는데 코드를 줄일 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인덱스만 stack에 push하기:
인덱스만 넣음으로써 높이를 따로 스택에 저장할 필요가 없어진다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;
&lt;h4 id=&quot;스택--이전기록을-기억하기-위해서-사용하는-자료구조&quot;&gt;스택 : 이전기록을 기억하기 위해서 사용하는 자료구조&lt;/h4&gt;
&lt;h4 id=&quot;큐--병렬로-처리해야할때-사용하는-자료구조&quot;&gt;큐 : 병렬로 처리해야할때 사용하는 자료구조&lt;/h4&gt;

&lt;p&gt;이 문제에서는 너비를 구하는게 포인트였다.
스택을 사용한다면 언제 넣고 언제 빼냐? 그리고 얼마나 넣고 뺄것인가에 대해 고민했다.
이 문제에서는 그 기준이 너비였고, 왼쪽기준과 오른쪽 기준을 정하기 위해서&lt;/p&gt;

&lt;p&gt;top에 있는 막대기보다 크다면 push하고,
작다면 pop하여 구할 수 있었다.&lt;/p&gt;

&lt;p&gt;스택을 사용했기 때문에 O(N)만에 연산이 가능하게 된 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yobs0814/problemSolving/blob/master/SWExpert/BOJ6549_2/main.cpp&quot;&gt;SourceCode&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 08 Feb 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2019-02-08/BOJ6549</link>
        <guid isPermaLink="true">http://localhost:4000/2019-02-08/BOJ6549</guid>
        
        <category>SW 역량테스트</category>
        
        <category>백준 온라인 저지</category>
        
        
      </item>
    
      <item>
        <title> 백준 2667 단지번호붙이기 DFS로 풀기 </title>
        <description>&lt;h1 id=&quot;목표-백준-2667-단지번호붙이기-문제-풀기&quot;&gt;목표: 백준 2667 단지번호붙이기 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-mojave-1014-clion&quot;&gt;환경: mac OS Mojave 10.14, CLion&lt;/h3&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;2차원 배열로 을 2중 for 문 돌면서 배열원소의 값이 1이면 단지번호를 가지고 DFS를 수행합니다.
DFS 끝나고 단지번호를 +=1 갱신해줍니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그리고 단지안에 집의 개수를 cnt[단지번호]에 저장해놨기 때문에 cnt[]배열을 c++ STL sort로 오름차순으로 정렬해줍니다. 끝&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;자세히 설명하자면,
이 문제를 풀기위해 사전지식이 필요해요.&lt;/p&gt;

&lt;p&gt;사전지식: DFS&lt;/p&gt;

&lt;p&gt;DFS는 재귀로 구현하죠.&lt;/p&gt;

&lt;h3 id=&quot;재귀-정의-어떤-알고리즘이-문제를-보다-작은-입력을-갖는-동일한-문제로-단순화시켜-해결한다면-이-알고리즘은-재귀적이라-불린다&quot;&gt;재귀 정의: 어떤 알고리즘이 문제를 보다 작은 입력을 갖는 동일한 문제로 단순화시켜 해결한다면, 이 알고리즘은 재귀적이라 불린다.&lt;/h3&gt;

&lt;h3 id=&quot;dfs깊이우선탐색-나를-먼저-방문하고-나와-인접하고-기존에-방문하지-않은-노드들을-방문한다-단-스택을-이용해서&quot;&gt;DFS(깊이우선탐색): 나를 먼저 방문하고, 나와 인접하고, 기존에 방문하지 않은 노드들을 방문한다. 단, 스택을 이용해서&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://www.crazyforcode.com/wp-content/uploads/2016/04/DFS.png&quot; alt=&quot;DFS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위에 이미지에 stack을 보면 노드들이 쌓이는게 보입니다.
그리고 보통 함수를 {} 로 묶고 그 블록을 ‘스코프’라고 하잖아요.
DFS코드를 따라갈때 이렇게 각각의 동그란 노드를 함수 스코프라고 생각하시면 DFS나 재귀함수 이해하는데 도움 돼요.&lt;/p&gt;

&lt;p&gt;아래 코드를 보시면 DFS함수 안에 DFS함수를 또 호출하죠 (재귀입니다, 입력이 nRow, nCol로 달라지고요). DFS라는 함수 스코프 안에 매개변수, 지역변수들이 존재할거고, 여기선 그게
각각의 행번호, 열번호, 단지번호 등이 되겠죠.&lt;/p&gt;

&lt;p&gt;재귀함수를 다르게 이해를 하자면, 재귀함수를 호출할때 호출되는 코드 바로 옆에 새로운 입력변수로 함수의 코드가 생기는 확장 구조로 생각하셔도 돼요.&lt;/p&gt;

&lt;p&gt;이제 DFS 함수를 호출후 하는 일을 보면,main함수에서 DFS 호출했어요. k,i를 가지고 row,col에 넣고 단지번호 가지고 스택에 push 한거에요.&lt;/p&gt;

&lt;p&gt;DFS 함수 내부에서 일어나는 일은 현재 row,col 에 해당하는 집에 단지번호를 붙여요. 그리고, 방문했다고 표시합니다.
그리고 인접한 집을 방문할때마다( DFS(nRow, nCOl)호출 ) 함수 내부에 일어나는 일이 반복됩니다. 
방문할 집이 없거나, 기존에 방문한 집이면 재귀함수를 호출하지 않고,
만약 동서남북 4방향이 다 그렇다면 함수가 종료됩니다. 스택에서 해당 함수 스코프가 빠지게됩니다.&lt;/p&gt;

&lt;p&gt;그러면 다시 스택에 맨위에 있는 함수코드가 이어서 진행됩니다. for문에서 북동남서방향으로 DFS호출했으니
만약에 동쪽방향으로 DFS()호출했고, 그 함수가 수행을 다하고 스택에서 pop 했으면, 이어서 남쪽 방향으로 DFS호출하고, 서쪽 방향도 마찬가지로 계속 수행할겁니다.
서쪽방향까지 수행했으면 해당위치의 함수코드가 모드 수행됐으니 그 함수 스코는 스택에서 pop 됩니다.&lt;/p&gt;

&lt;p&gt;위의 그림이미지를 다시 보고 오시면 이해하는데 도움이 돼요.&lt;/p&gt;

&lt;p&gt;그리고 동서남북 방향으로 2차원 배열 원소를 접근할때,&lt;/p&gt;

&lt;p&gt;항상 유효한 배열범위를 넘어가면 안되니, 범위체크해줍니다.&lt;/p&gt;

&lt;p&gt;기존에 방문한 노드면 또 방문하지 않습니다. 방문체크해줍니다.&lt;/p&gt;

&lt;p&gt;dRow, dCol 배열을 통해 동서남북 배열원소를 확인할 수 있습니다.
예를 들어, 0,0 위치에서 -1,0 (북) 0,1 (동) 1,0 (남) 0,-1 (서) 방향으로 배열원소의 값이 1인지 확인할 수 있습니다.
이렇게 각각의 행번호,열번호 위치에서 동서남북으로 이동해보면서 배열원소의 값이 1이면, 단지번호를 붙이고 다음 위치를 입력변수로 주고 DFS를 호출합니다.&lt;/p&gt;

&lt;p&gt;이렇게 main함수 내에 2중 for문 안에 DFS를 한번 호출할때마다 
인접해있는 원소들은 다 같은 수로 갱신됩니다.&lt;/p&gt;

&lt;p&gt;문제에서 원하는건 단지의 수와 
각 단지의 요소수입니다.&lt;/p&gt;

&lt;p&gt;단지수는 danjinum 변수를 이용해서
단지 요소의 개수는 cnt[단지번호]를 통해서 구할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;danjiNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;danji&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;danjiNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;danjiNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;danjiNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nCol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dCol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nRow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nCol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nCol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nCol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nCol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nRow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nCol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;danjiNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yobs0814/problemSolving/blob/master/SWExpert/BOJ2667/main.cpp&quot;&gt;SourceCode&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Nov 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-11-29/BOJ2667</link>
        <guid isPermaLink="true">http://localhost:4000/2018-11-29/BOJ2667</guid>
        
        <category>SW 역량테스트</category>
        
        <category>백준 온라인 저지</category>
        
        
      </item>
    
      <item>
        <title> 백준 10816 lower_bound upper_bound로 풀기 </title>
        <description>&lt;h1 id=&quot;목표-백준-10816-lower_bound-upper_bound로-문제-풀기&quot;&gt;목표: 백준 10816 lower_bound, upper_bound로 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-mojave-1014-clion&quot;&gt;환경: mac OS Mojave 10.14, CLion&lt;/h3&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;
&lt;p&gt;lower_bound 함수를 통해서 찾으려는 수보다 작거나 같은 수 중에서 가장 큰 값의 인덱스를 반환&lt;/p&gt;

&lt;p&gt;upper_bound 함수를 통해서 찾으려는 수보다 큰 수 중에서 가장 작은 값의 인덱스를 반환&lt;/p&gt;

&lt;p&gt;답 : upper_bound - lower_bound&lt;/p&gt;

&lt;p&gt;lower_bound: 
오름차순으로 정렬되어있는 배열에서 찾고자 하는 key 값보다 작거나 같은 수 중에서 가장 큰 수의 인덱스를 반환합니다.
처음 lower_bound를 통해 값을 찾고자 하는 구간을 [0, 마지막인덱스+1]로 설정합니다. 구간 내의 중간 위치를 mid라고 할때, 
arr[mid] &amp;gt;= key 이면 [left, mid] , arr[mid] &amp;lt; key 이면 [mid+1, right] 로 arr[mid] 값을 통해
탐색구간을 좁혀갑니다. 탐색하는 구간에는 key값과 같거나 key보다 작은 값들이 존재합니다.&lt;/p&gt;

&lt;p&gt;처음 lower_bound 탐색하는 구간을 마지막인덱스+1로 하는 이유는 해당배열에서 가장 큰 값보다 더 큰 수를 찾을 때에는
마지막 인덱스+1로 표현을 해야되기 때문입니다.&lt;/p&gt;

&lt;p&gt;left : 찾으려는 수보다 작은 수
right : 찾으려는 수보다 크거나 같은 수&lt;/p&gt;

&lt;p&gt;lower_bound 과정
&lt;img src=&quot;/img/10816_1.png&quot; alt=&quot;1&quot; /&gt;
&lt;img src=&quot;/img/10816_2.png&quot; alt=&quot;2&quot; /&gt;
&lt;img src=&quot;/img/10816_3.png&quot; alt=&quot;3&quot; /&gt;
&lt;img src=&quot;/img/10816_4.png&quot; alt=&quot;4&quot; /&gt;
&lt;img src=&quot;/img/10816_5.png&quot; alt=&quot;5&quot; /&gt;
right는 항상 key값보다 크거나 같은 수로 유지됩니다.&lt;/p&gt;

&lt;p&gt;lower_bound는 이렇게 작거나 같은 수중 가장 큰 값으로 범위를 좁혀가요.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lower_bound&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper_bound&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;upper_bound는&lt;/p&gt;

&lt;p&gt;left : 찾으려는 수보다 작거나 같은 수
right : 찾으려는 수보다 큰 수&lt;/p&gt;

&lt;p&gt;그래서 left에는 key값도 포함합니다.
right값은 항상 key값보다 크고요.&lt;/p&gt;

&lt;p&gt;lower_bound와 left, right의 변수의 의미에 차이가 있습니다.&lt;/p&gt;

&lt;p&gt;이분탐색, lower_bound, upper_bound에서는 이렇게 left, right 변수의 의미를 명확히 두는게 중요합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yobs0814/problemSolving/blob/master/SWExpert/BOJ10816/main.cpp&quot;&gt;SourceCode&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Nov 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-11-29/BOJ18016</link>
        <guid isPermaLink="true">http://localhost:4000/2018-11-29/BOJ18016</guid>
        
        <category>SW 역량테스트</category>
        
        <category>백준 온라인 저지</category>
        
        
      </item>
    
      <item>
        <title> 백준 5373 큐빙 </title>
        <description>&lt;h1 id=&quot;목표-백준-온라인-저지-5373-큐빙-문제-풀기&quot;&gt;목표: 백준 온라인 저지 5373 큐빙 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-mojave-1014-clion&quot;&gt;환경: mac OS Mojave 10.14, CLion&lt;/h3&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/5373&quot;&gt;큐빙&lt;/a&gt; 문제는 시뮬레이션 유형의 문제입니다.
시뮬레이션 문제는 주어진 문제의 조건을 그대로 구현하는 문제에요.&lt;/p&gt;

&lt;p&gt;좀더 자세히 말하자면, 큐브를 돌릴때 큐브를 바라본 좌측상단을 기준으로 아래와 같이 인덱스 넘버링을 하였습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;그리고 돌리는 면도 WAY1 라는 enum을 통해 표현하고, 노트에 큐브의 전개면을 그린 후에&lt;/p&gt;

&lt;p&gt;이동순서를 일일히 그려보고 그대로 배열요소 값을 이동시켰습니다.&lt;/p&gt;

&lt;p&gt;알고리즘을 몰라도 풀 수 있는 문제인데, 구현하는데 오래걸렸습니다.&lt;/p&gt;

&lt;p&gt;큐브를 돌리면, 돌리는 면을 기준으로 왼쪽, 오른쪽, 뒤쪽, 앞쪽 면도 돌아가지만, 돌리는 면도 바뀐다는 것입니다.&lt;/p&gt;

&lt;p&gt;이전에 틀린 코드와 PASS한 코드의 차이점은 돌리는 면은 그대로 두고 돌리는 면에 붙어있는 큐브들만 위치를 변경한 점입니다.&lt;/p&gt;

&lt;p&gt;마지막으로 나중에 더 좋은 방법을 알게되면 포스팅할 계획이 있습니다. 이렇게 푸는게 아닐 겁니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yobs0814/problemSolving/blob/master/SWExpert/BOJ5373_3/main.cpp&quot;&gt;SourceCode&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Nov 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-11-07/BOJ5373</link>
        <guid isPermaLink="true">http://localhost:4000/2018-11-07/BOJ5373</guid>
        
        <category>SW 역량테스트</category>
        
        <category>백준 온라인 저지</category>
        
        
      </item>
    
      <item>
        <title> 백준 3184 양 </title>
        <description>&lt;h1 id=&quot;목표-백준-온라인-저지-3184-양-문제-풀기&quot;&gt;목표: 백준 온라인 저지 3184 양 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-mojave-1014-clion&quot;&gt;환경: mac OS Mojave 10.14, CLion&lt;/h3&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/3184&quot;&gt;양&lt;/a&gt; 문제는
울타리(#)와 배열의 범위내에서 구분된 영역을 동서남북 방향으로 탐색한다.
탐색하면서 알아낸 늑대 수와 양의 수를 비교하여 둘중 하나를 제거해주면서
최종적으로 남은 늑대 수 와 양의 수를 출력한다.&lt;/p&gt;

&lt;p&gt;BFS 정의: 연결된 정점을 한 번씩 방문한다. 단 인접한 노드들을 우선 모두 방문하면서 뻗어나간다.&lt;/p&gt;

&lt;p&gt;입력범위 3&amp;lt;= 행, 열 &amp;lt;= 250&lt;/p&gt;

&lt;p&gt;우리는 2중 for문을 통해 2차원 배열(행,열) (0,0) 인덱스부터 (249, 249)까지 반복하면서
빈칸일때마다 BFS를 통해 연결된 정점을 한 번씩 방문한다.&lt;/p&gt;

&lt;p&gt;시간복잡도: O(N^2) + O(V+E)
250^2 * 결국 2차원 배열 전체를 방문할 것이기 때문에 250^2
총 30억이라는 큰 시간복잡도가 나옵니다. 
실제로는 2차원 배열 전체 중 벽은 제외해야되며, 방문했던 곳은 또 방문하지 않기 때문에 
이것보다 훨씬 적은 시간복잡도가 나올 것입니다.&lt;/p&gt;

&lt;p&gt;시간복잡도를 줄이기 위해서 
BFS를 시작하기 위한 조건을 방문하려는 칸에 늑대 또는 양이 있어야함으로 바꿈으로서 시간복잡도를 줄일 수 있다고 생각했습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yobs0814/problemSolving/blob/master/SWExpert/BOJ3184/main.cpp&quot;&gt;SourceCode&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Nov 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-11-04/BOJ3184</link>
        <guid isPermaLink="true">http://localhost:4000/2018-11-04/BOJ3184</guid>
        
        <category>SW 역량테스트</category>
        
        <category>백준 온라인 저지</category>
        
        
      </item>
    
      <item>
        <title> SWEA 2112 [모의 SW 역량테스트] 보호 필름 </title>
        <description>&lt;h1 id=&quot;목표-swexpert-academy-2112-보호-필름-문제-풀기&quot;&gt;목표: SWexpert Academy 2112 보호 필름 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-high-sierra-10134-clion&quot;&gt;환경: mac OS High Sierra 10.13.4, CLion&lt;/h3&gt;

&lt;p&gt;이 문제 또한 완전탐색으로 풀려고 합니다.
완전탐색이란 문제의 답을 찾는 것인데, 가능한 경우를 모두 나열하고, 각각이 해가 될 수 있는지 확인하는 방법입니다.&lt;/p&gt;

&lt;p&gt;우선 완전탐색의 장단점을 얘기해보자면
장점으로는 어떻게든 답을 구해낼 수 있다는 것이에요. 모든 경우를 다 살펴보고 해를 구하는 것이니까요.
단점은 문제의 조건에 따라 오래 걸린다는 것인데, 이것을 최적화 하는 방법들이 있어요. 가지치기라든지 백트래킹이라든지&lt;/p&gt;

&lt;p&gt;[제약사항]&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;시간제한 : 최대 50개 테스트 케이스를 모두 통과하는데, C/C++/Java 모두 5초&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보호 필름의 두께 D는 3이상 13이하의 정수이다. (3≤D≤13)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보호 필름의 가로크기 W는 1이상 20이하의 정수이다. (1≤W≤20)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;합격기준 K는 1이상 D이하의 정수이다. (1≤K≤D)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;셀이 가질 수 있는 특성은 A, B 두 개만 존재한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/15686&quot;&gt;치킨배달&lt;/a&gt;문제와 굉장히 비슷한 개념을 물어보는 문제인데요.&lt;/p&gt;

&lt;p&gt;이 문제에서는 D층에 시료를 추가해서 안전한 보호필름을 만드는 것이 중요한데,
이 문제에서는 몇개의 시료를 추가해야하는지 주어지지 않았습니다. 그 말은 0개부터 D개까지 다 넣어보면서 안전한 보호필름인지 체크하라는 것인데요.&lt;/p&gt;

&lt;p&gt;크게 두가지 로직으로 나뉠 수 있는데,&lt;/p&gt;

&lt;p&gt;몇개의 시료를 추가할거냐?와 몇개의 시료를 추가할거냐는 치킨배달 문제에서 n개의 체인점 중에서 m개를 구하는 방법과 똑같은데, 거기에 플러스 m개가 주어지지 않았기 때문에 0~D개까지 다해보는겁니다.&lt;/p&gt;

&lt;p&gt;약품검사를 어떻게 할것인가?로 나뉘는데요.  약품검사는 재귀를 돌면서 계속해서 해야하는 체크로직이기 때문에 효율적이여야합니다.
약품검사의 경우는 문제의 정의대로 보면 약품검사를 하다가 안전하지 않은 열을 찾았으면
그 뒤에 있는 열을 계속 검사할 필요가 없습니다. 약품검사를 그만두는 코드가 꼭 필요합니다.&lt;/p&gt;

&lt;p&gt;여기서 중요하게 완전탐색은 그러면 인간의 논리를 넣지않고, 컴퓨터의 연산능력을 이용해 가능한 모든 경우의수를 탐색하되,&lt;/p&gt;

&lt;p&gt;재귀함수도 마찬가지고 구현문제도 마찬가지고 더이상 안돌아봐야할 경우가 매우 확실해 지잖아요? 그건 돌아보면 안됩니다. 절대로&lt;/p&gt;

&lt;h2 id=&quot;추가내용-새로-짠-코드인데-50개-테스트케이스중-49개에서-fail한-코드를-수정해서-pass-됐습니다&quot;&gt;추가내용: 새로 짠 코드인데, 50개 테스트케이스중 49개에서 fail한 코드를 수정해서 PASS 됐습니다.&lt;/h2&gt;

&lt;p&gt;이것이 가능했던 이유는 시간복잡도를 계산했기 때문입니다. (다행히 SWEA에서는 실행 시간을 참고할 수 있기 때문에 어떻게 수정해야될지 고민할 기회가 있었습니다.)&lt;/p&gt;

&lt;p&gt;이전에 한번에 성공한 코드와 다른점은 choice배열을 통해 어떤 행에 시약을 투약할지 정하고&lt;/p&gt;

&lt;p&gt;시약개수 == 투입시켜야하는 시약 개수 조건에서 2차원 배열을 통째로 복사해서 했습니다.&lt;/p&gt;

&lt;p&gt;그전에는 시약을 투약하는 행만 바꾸는 백트래킹 로직이 O(N)의 시간복잡도로 수행되지만, 이 코드에서는 투약을 할때 기존 맵을 복사하는 과정인 O(N^2)이 되기 때문에 시간초과가 나왔습니다.&lt;/p&gt;

&lt;p&gt;그렇다면 최적화할 방법이 필요했는데, 현재 로직에선 합격이 되었더라도 현재 시약개수를 다 쓰는 모든 경우의 수를 계속해서 탐색하기 때문에,&lt;/p&gt;

&lt;h2 id=&quot;필릅검사가-합격했다면-더이상-모든-경우의-수를-탐색할-필요가-없습니다-여기서-if문을-추가해서-재귀를-돌때-만약-답을-찾았다면-return을-시켜-함수를-종료해버리는-것입니다&quot;&gt;필릅검사가 합격했다면 더이상 모든 경우의 수를 탐색할 필요가 없습니다. 여기서 if문을 추가해서 재귀를 돌때 만약 답을 찾았다면 return을 시켜 함수를 종료해버리는 것입니다.&lt;/h2&gt;

&lt;p&gt;사실 이 방법보다 문제의 원리대로 한 행만 바꿔주는 O(N) 방법이 더 효율적이고 코드가 더 깔끔하니, 이 방법을 사용할 필요는 없을 것 같습니다.&lt;/p&gt;

&lt;p&gt;하지만 이런 문제를 고민해봄으로써 재귀과정을 좀더 이해하게 되는 시간이었습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5V1SYKAaUDFAWu&amp;amp;categoryId=AV5V1SYKAaUDFAWu&amp;amp;categoryType=CODE&quot;&gt;보호 필름&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yobs0814/problemSolving/blob/master/SWExpert/P2112_3/main.cpp&quot;&gt;code&lt;/a&gt; 백트래킹 과정에 상태를 복사하는 과정이 O(N^2) 인 코드&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yobs0814/problemSolving/blob/master/SWExpert/P2112/main.cpp&quot;&gt;이전code&lt;/a&gt; 백트래킹 과정에 상태를 복사하는 과정이 O(N) 인 코드 &amp;lt;- 이 코드가 명확하게는 문제의 원리대로 구현한 코드이기 떄문에 더 좋은 코드라고 생각합니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-10-20/SWEA2112</link>
        <guid isPermaLink="true">http://localhost:4000/2018-10-20/SWEA2112</guid>
        
        <category>SW 역량테스트</category>
        
        
      </item>
    
      <item>
        <title> 백준 14502 연구소 부르트포스로 풀기 </title>
        <description>&lt;h1 id=&quot;목표-백준-온라인-저지-14502-연구소-문제-풀기&quot;&gt;목표: 백준 온라인 저지 14502 연구소 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-high-sierra-10134-clion&quot;&gt;환경: mac OS High Sierra 10.13.4, CLion&lt;/h3&gt;

&lt;p&gt;이 문제 완전탐색(부르트포스)으로 풀려고 합니다.
완전탐색이란 문제의 답을 찾는 것인데, 가능한 경우를 모두 나열하고, 각각이 해가 될 수 있는지 확인하는 방법입니다.&lt;/p&gt;

&lt;p&gt;우선 완전탐색의 장단점을 얘기해보자면
장점으로는 어떻게든 답을 구해낼 수 있다는 것이에요. 모든 경우를 다 살펴보고 해를 구하는 것이니까요.
단점은 문제의 조건에 따라 오래 걸린다는 것인데, 이것을 최적화 하는 방법들이 있어요. 가지치기라든지 백트래킹이라든지&lt;/p&gt;

&lt;h2 id=&quot;로직&quot;&gt;로직&lt;/h2&gt;
&lt;p&gt;시간복잡도를 계산하여 완전탐색을 했을시에 시간복잡도가 1억번 이하다? -&amp;gt; 완전탐색&lt;/p&gt;

&lt;p&gt;그 이유는 전 실력이 부족하여 완벽하게 그리디 알고리즘으로 짤 수 없습니다.&lt;/p&gt;

&lt;p&gt;그렇다면 시간제한안에 안전하게 답을 구하는 방법이 있다면?&lt;/p&gt;

&lt;p&gt;모든 경우의수를 돌아도 그것은 좋은 방법중 하나입니다.&lt;/p&gt;

&lt;p&gt;그래서 완전탐색으로 설계를 하였습니다.&lt;/p&gt;

&lt;p&gt;우선 가능한 모든 경우의 수를 만들어 봅시다.&lt;/p&gt;

&lt;p&gt;N(행),M(열)로 이루어진 2차원 배열에 빈칸에 벽을 3개 세울겁니다.&lt;/p&gt;

&lt;p&gt;빈칸에만 벽을 세울수 있겠죠.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//빈칸이면 벽을 세워보자&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1은 벽을 의미합니다.&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0은 빈칸을 의미합니다. 되돌아왔을때는 기존 상태로 돌려놔야겠죠.&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드가 익숙하지 않으신분들은 
&lt;a href=&quot;https://www.acmicpc.net/problem/1987&quot;&gt;알파벳&lt;/a&gt; 문제를 빠르게 보시는게 좋습니다.
또는 최백준님의 N과M 문제집을 보시면 비슷한 유형문제가 많이 나옵니다.
재귀를 통해 조합문제를 푸는 것인데, NM가지중 3개 또는 N개를 뽑는 문제입니다.
뛰어나신분들이 해놓은 코드가 있으니 검색해보시길.&lt;/p&gt;

&lt;p&gt;위와같은 solve함수를 얼마나 호출할건가?
세울 벽의 개수가 0일때까지 해야겠죠. 더이상 벽을 세울수 없으니까요.&lt;/p&gt;

&lt;p&gt;벽을 세웠으니, 바이러스를 퍼트리고, 안전영역을 구해봐야겠죠.
바이러스는 인전한 빈칸으로 퍼집니다.
나를 방문하고, 나에 인접한 노드를 한번씩 방문한다. =&amp;gt; 그래프 순회를 의미합니다.
BFS, DFS중 BFS를 이용해서 구현하였습니다.&lt;/p&gt;

&lt;p&gt;입력받을때 바이러스의 위치를 pair타입을 통해서 row,col 을 저장해놨습니다.
바이러스위치에서 BFS를 돌리는데 바이러스 개수만큼 돌리면 되겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//cnt는 세울 벽의 개수를 의미합니다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//안전영역 구하기&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//기본 맵 복사&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BFS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//안전영역 구한후 다시 기존맵 복원&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;시간복잡도를 계산해보면
벽을 세우는 방법은 O(NM^3)입니다.
3번 세울건데,  NM가지중 한개를 선택하는 방법의수 : NM 을 세번하여
NM * NM * NM 가 되고
BFS를 방문하는데 인접한 모든 노드를 방문할거니 O(NM)이 됩니다. NM 모든 노드를 한번씩 방문할거니까요.&lt;/p&gt;

&lt;p&gt;[제약사항] 첫째 줄에 지도의 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 8)&lt;/p&gt;

&lt;p&gt;그렇다면 총 O(NM^4) = 약 1600만번입니다. 통상적으로 1억번을 연산하는데 1초걸린다하면 
시간안에 수행가능한 프로그램입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/14502&quot;&gt;연구소&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yobs0814/problemSolving/blob/master/SWExpert/P14502/main.cpp&quot;&gt;SourceCode&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-10-17/backjoonP14502</link>
        <guid isPermaLink="true">http://localhost:4000/2018-10-17/backjoonP14502</guid>
        
        <category>SW 역량테스트</category>
        
        <category>백준 온라인 저지</category>
        
        
      </item>
    
      <item>
        <title> SWEA 4012 [모의 SW 역량테스트] 요리사 </title>
        <description>&lt;h1 id=&quot;목표-swexpert-academy-4012-모의-sw-역량테스트-요리사-문제-풀기&quot;&gt;목표: SWexpert Academy 4012 [모의 SW 역량테스트] 요리사 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-high-sierra-10134-clion&quot;&gt;환경: mac OS High Sierra 10.13.4, CLion&lt;/h3&gt;

&lt;p&gt;이 문제 또한 완전탐색으로 풀려고 합니다.
완전탐색이란 문제의 답을 찾는 것인데, 가능한 경우를 모두 나열하고, 각각이 해가 될 수 있는지 확인하는 방법입니다.&lt;/p&gt;

&lt;p&gt;우선 완전탐색의 장단점을 얘기해보자면
장점으로는 어떻게든 답을 구해낼 수 있다는 것이에요. 모든 경우를 다 살펴보고 해를 구하는 것이니까요.
단점은 문제의 조건에 따라 오래 걸린다는 것인데, 이것을 최적화 하는 방법들이 있어요. 가지치기라든지 백트래킹이라든지&lt;/p&gt;

&lt;h2 id=&quot;로직&quot;&gt;로직&lt;/h2&gt;
&lt;p&gt;두명의 손님에게 음식을 제공하려고 합니다.
그리고 N개의 식재료가 있습니다. 식재료는 N/2 개씩 나누어 두 개의 요리하려고 합니다. (N은 짝수)&lt;/p&gt;

&lt;p&gt;가상의 요리사 A, B가 있습니다.
food[]라는 배열을 통해 N개의 식재료들을 나열해놨습니다.
A,B 요리사는 각각 N/2개씩 식재료를 찜해놓습니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// inx번째 식재료는 A요리사가 찜&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aCnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bCnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;food&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// inx번재 식재료는 B요리사가 찜&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aCnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bCnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드가 익숙하지 않으신분들은 
&lt;a href=&quot;https://www.acmicpc.net/problem/1987&quot;&gt;알파벳&lt;/a&gt; 문제를 빠르게 보시는게 좋습니다.
재귀를 통해 조합문제를 푸는 것인데,
뛰어나신분들이 해놓은 코드가 있으니 검색해보시길.&lt;/p&gt;

&lt;p&gt;그럼 다시 식재료 찜하는 것을 언제까지하냐?
언제 재귀가 멈춰야하는지? 
종료조건 == 모든 식재료가 찜 됐음. 
그때에 식재료 선택이 끝났으니 calc()함수에서 시너지 계산하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러면 안되는 경우는? 각각의 요리사가 찜한 요리의 식재료 수가 N/2보다 크면 안됩니다.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aCnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bCnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;재귀함수의 시간복잡도는
solve 함수 내에서 solve를 두번씩
인덱스가 0~N-1까지 반복되다보니
O(2^N)이 됩니다. N크기가 (4 ≤ N ≤ 16)이므로 최악의 경우 2의 16승이므로 굉장히 작은 연산횟수입니다.&lt;/p&gt;

&lt;p&gt;1초에 약 1억번 연산한다고 했을때 비해도 충분히 적은 횟수이무로 좋은 알고리즘이라고 생각합니다.&lt;/p&gt;

&lt;p&gt;[제약사항]&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;시간 제한 : 최대 50개 테스트 케이스를 모두 통과하는 데 C / C++ / Java 모두 3초&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;식재료의 수 N은 4이상 16이하의 짝수이다. (4 ≤ N ≤ 16)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;시너지 Sij는 1이상 20,000이하의 정수이다. (1 ≤ Sij ≤ 20,000, i ≠ j)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;i와 j가 서로 같은 경우의 Sij값은 정의되지 않는다. 입력에서는 0으로 주어진다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.swexpertacademy.com/main/code/problem/problemDetail.do&quot;&gt;요리사&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yobs0814/problemSolving/blob/master/SWExpert/p4012/main.cpp&quot;&gt;code&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 13 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-10-13/SWExpert-4012</link>
        <guid isPermaLink="true">http://localhost:4000/2018-10-13/SWExpert-4012</guid>
        
        <category>SW 역량테스트</category>
        
        
      </item>
    
      <item>
        <title>SWExpertacademy 1952. [모의 SW 역량테스트] 수영장</title>
        <description>&lt;h1 id=&quot;목표-swexpertacademy-1952-모의-sw-역량테스트-수영장-문제-풀기&quot;&gt;목표: SWExpertacademy 1952. [모의 SW 역량테스트] 수영장 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-high-sierra-10134-clion&quot;&gt;환경: mac OS High Sierra 10.13.4, CLion&lt;/h3&gt;

&lt;p&gt;이 문제 또한 완전탐색으로 풀려고 합니다.
완전탐색이란 문제의 답을 찾는 것인데, 가능한 경우를 모두 나열하고, 각각이 해가 될 수 있는지 확인하는 방법입니다.&lt;/p&gt;

&lt;p&gt;우선 완전탐색의 장단점을 얘기해보자면
장점으로는 어떻게든 답을 구해낼 수 있다는 것이에요. 모든 경우를 다 살펴보고 해를 구하는 것이니까요.&lt;/p&gt;

&lt;p&gt;이 문제를 통해 알게된 것은 시간복잡도를 계산해보는 습관이 중요하다는 것입니다. 시간 안에 정확히 동작한다면, 그 방법은 좋은 방법입니다.&lt;/p&gt;

&lt;p&gt;물론 더 빠른 방법으로 구현할 수 있으면 그게 최고겠죠.&lt;/p&gt;

&lt;p&gt;[제약 사항]&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;시간 제한 : 최대 50개 테스트 케이스를 모두 통과하는 데 C/C++/Java 모두 3초&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모든 종류의 이용권 요금은 10 이상 3,000 이하의 정수이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;각 달의 이용 계획은 각 달의 마지막 일자보다 크지 않다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;수영장 이용 요금의 최소값을 구하는 문제입니다.&lt;/p&gt;

&lt;p&gt;문제를 보자마자 파악해낸 것은 인간의 논리로 계산하는 것(그리디 알고리즘)보다&lt;/p&gt;

&lt;p&gt;빠른 연산을 이용한 완전탐색이 답을 찾는데 안전한 방법이다. 라고 생각했습니다.&lt;/p&gt;

&lt;p&gt;그래서 경우의 수를 나눠봤습니다.&lt;/p&gt;

&lt;p&gt;1일 이용권을 사용하는 경우&lt;/p&gt;

&lt;p&gt;1달 이용권을 사용하는 경우&lt;/p&gt;

&lt;p&gt;3달 이용권을 사용하는 경우&lt;/p&gt;

&lt;p&gt;1년 이용권을 사용하는 경우로 나뉘는데요.&lt;/p&gt;

&lt;p&gt;처음 설계한 방법은 10월이전에만 3달 이용권을 사용하게끔 if문을 넣어줬었고, 1월달에만 1년치 이용권을 사용하게 하였습니다.&lt;/p&gt;

&lt;p&gt;테스트케이스의 답과 다르게 나와서 뭐가 잘못되었는지 생각해봤습니다.&lt;/p&gt;

&lt;p&gt;문제의 조건을 보면&lt;/p&gt;

&lt;p&gt;① 1일 이용권 : 1일 이용이 가능하다.&lt;/p&gt;

&lt;p&gt;② 1달 이용권 : 1달 동안 이용이 가능하다. 1달 이용권은 매달 1일부터 시작한다.&lt;/p&gt;

&lt;p&gt;③ 3달 이용권 : 3달 동안 이용이 가능하다. 3달 이용권은 매달 1일부터 시작한다.
       (11월, 12월에도 3달 이용권을 사용할 수 있다)&lt;/p&gt;

&lt;p&gt;④ 1년 이용권 : 1년 동안 이용이 가능하다. 1년 이용권은 매년 1월 1일부터 시작한다.&lt;/p&gt;

&lt;p&gt;11월 12월 에도 3달 이용권을 사용할 수 있다고 친절하게 설명을 해줬습니다.&lt;/p&gt;

&lt;p&gt;&amp;lt;이 말은 어느달이든 상관없이 3달 이용권과 1년 이용권을 사용해도 된다.&amp;gt;라는 인사이트를 주었습니다.
왜냐하면 어차피 최소값을 구하는게 답이기 때문에 넘치게 이용권을 남발한경우는 값을 최소값 갱신 if문을 통과하지 못할겁니다.&lt;/p&gt;

&lt;p&gt;시간복잡도를 계산해보면 1월부터 12월까지 다 이용한다고 치면, 매 달마다
1일치 이용권을 사용하는 경우
1달치 이용권을 사용하는 경우
..
총 네가지 방법이 가능합니다.&lt;/p&gt;

&lt;p&gt;그러므로 4번 * 4번 * .. * 4번, 총 4^12번 이 가능하고
O(2^12) 약 1600만이라는 시간복잡도가 나옵니다.&lt;/p&gt;

&lt;p&gt;1초에 1억번 연산한다고 가정하였을때 1초에 수행이 된다는 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;이 문제를 풀기 위한 사전 문제풀이는 
&lt;a href=&quot;https://www.acmicpc.net/problem/1987&quot;&gt;알파벳&lt;/a&gt;
&lt;a href=&quot;https://www.acmicpc.net/problem/1759&quot;&gt;암호만들기&lt;/a&gt;
&lt;a href=&quot;https://www.acmicpc.net/problem/9095&quot;&gt;1+2+3더하기&lt;/a&gt;
등 재귀를 통한 해결할 수 있는 조합적문제들 입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.swexpertacademy.com/main/solvingProblem/solvingProblem.do&quot;&gt;수영장&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[code]
( https://github.com/yobs0814/problemSolving/blob/master/SWExpert/P1952/main.cpp )&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-10-10/SWExpert-1952</link>
        <guid isPermaLink="true">http://localhost:4000/2018-10-10/SWExpert-1952</guid>
        
        <category>SW 역량테스트</category>
        
        
      </item>
    
      <item>
        <title>SWExpertacademy 1953. [모의 SW 역량테스트] 탈주범 검거</title>
        <description>&lt;h1 id=&quot;목표-swexpertacademy-1953-모의-sw-역량테스트-탈주범-검거-문제-풀기&quot;&gt;목표: SWExpertacademy 1953. [모의 SW 역량테스트] 탈주범 검거 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-high-sierra-10134-clion&quot;&gt;환경: mac OS High Sierra 10.13.4, CLion&lt;/h3&gt;

&lt;p&gt;[제약 사항]&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;시간 제한 : 최대 50개 테이트 케이스를 모두 통과하는데, C/C++/Java 모두 1초&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;지하 터널 지도의 세로 크기 N, 가로 크기 M은 각각 5 이상 50 이하이다. (5 ≤ N, M ≤ 50)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;맨홀 뚜껑의 세로 위치 R 은 0 이상 N-1이하이고 가로 위치 C 는 0 이상 M-1이하이다. (0 ≤ R ≤ N-1, 0 ≤ C ≤ M-1)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;탈출 후 소요된 시간 L은 1 이상 20 이하이다. (1 ≤ L ≤ 20)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;지하 터널 지도에는 반드시 1개 이상의 터널이 있음이 보장된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;맨홀 뚜껑은 항상 터널이 있는 위치에 존재한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 문제는 2차원 배열로 구성된 맵안에서 row,col값을 변경하며 2차원배열을 순회하는 문제이고, 
또한 시간당 1의 거리를 움직일 수 있다는 특징이 가중치를 1로 둔 그래프를 순회하는 말이므로 
BFS로 해결했습니다.&lt;/p&gt;

&lt;h3 id=&quot;그래프-순회의-목적-특정-노드부터-시작해서-연결되어있는-모든-노드정점을-방문&quot;&gt;그래프 순회의 목적: 특정 노드부터 시작해서 연결되어있는 모든 노드(정점)을 방문&lt;/h3&gt;
&lt;h3 id=&quot;bfs-인접한-노드들을-우선-모두-방문표시하고-뻗어나간다&quot;&gt;BFS: 인접한 노드들을 우선 모두 방문표시하고 뻗어나간다.&lt;/h3&gt;

&lt;p&gt;그래프를 순회하기 위해서는 각각의 정점에 대해서 간선을 저장해둬야합니다.
이 문제에서는 그래프연결을 입력으로 받지 않고 각 위치에서 터널구조물에 따라 상 하 좌 우 이동방향이 정해지기 때문에 특정 노드에서 연결된 터널끼리만 이동가능하게 하면 됩니다.&lt;/p&gt;

&lt;p&gt;시간복잡도 계산: 그래프 순회 시간복잡도 O(V+E)
(정점의 개수)2500 * (간선의 개수)(2500 * 4) 모든 노드가 상 하 좌 우 네방향으로 이동가능하다고 했을 때 각 노드마다 4가지 방향으로 이동가능&lt;/p&gt;

&lt;p&gt;1초에 약 1억번 연산을 한다고 가정했을 때 1초안에 수행됩니다.&lt;/p&gt;

&lt;p&gt;이런 2차원 배열을 순회하는 알고리즘에서는 다음 이동가능한 경우를 체크하는 로직에서 O(N^2)이 나오면 시간초과가 되는 경우가 흔합니다. 
그러므로 체크로직을 수행할때는 되도록이면 2차원 배열을 이용해 	체크로직의 시간복잡도가 O(1)이 되게끔 구현하는것이 좋습니다.&lt;/p&gt;

&lt;p&gt;체크로직을 if문을 통해 할 수 있지만 isConnected라는 2차원 배열을 통해 구현하였습니다.
이 배열의 의미는 isConnected[ ** 이동할방향 ** ][ ** 다음노드의 터널종류 ** ]입니다.&lt;/p&gt;

&lt;p&gt;예를 들어 현재노드(터널)1일 경우 상하좌우로 이동가능하며 오른쪽으로 이동한다고 가정했을때 
다음 노드는 터널종류 1,3,6,7인 경우에만 연결이 되므로 이동가능합니다.
그래서 isConnected[1] = {false, true, false, true,  false, false, true,  true}; 
인덱스 1,3,6,7만 true로 해두고 나머지는 false로 이동가능한지를 체크합니다.
이렇게 구현함으로써 체크로직의 시간복잡도는 O(1)이 걸리게 됩니다.&lt;/p&gt;

&lt;p&gt;또한 1시간당 1번 이동하므로 다음 노드까지의 이동거리를 현재까지 이동거리에 1씩 더해줌으로써
dist[nRow][nCol] = dist[curRow][curCol] + 1;
결국 시간 = 거리 로 의미를 두어 거리가 6까지 이동할 수 있는 범위는 6시간안에 이동할 수 있는 범위가 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;그래프-순회에서-가장-중요한-것이-연결된-모든-노드를-방문한다&quot;&gt;그래프 순회에서 가장 중요한 것이 연결된 모든 노드를 방문한다&lt;/h3&gt;
&lt;h3 id=&quot;단-한번씩만-방문한다&quot;&gt;단, 한번씩만 방문한다.&lt;/h3&gt;

&lt;p&gt;그러므로 노드 방문한 체크 배열이 필요한데, 거리가 0인경우 아직 방문하지 않았다는 의미이므로
dist배열을 통해서 방문 여부를 판단할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PpLlKAQ4DFAUq&amp;amp;categoryId=AV5PpLlKAQ4DFAUq&amp;amp;categoryType=CODE&quot;&gt;탈주범 검거&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yobs0814/problemSolving/blob/master/SWExpert/1953/main.cpp&quot;&gt;code&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-10-09/SWExpert-1953</link>
        <guid isPermaLink="true">http://localhost:4000/2018-10-09/SWExpert-1953</guid>
        
        <category>SW 역량테스트</category>
        
        
      </item>
    
      <item>
        <title>SWExpert #5648 원자 소멸 시뮬레이션</title>
        <description>&lt;h1 id=&quot;목표-swexpertacademy-p5648-원자-소멸-시뮬레이션-문제-풀기&quot;&gt;목표: SWExpertacademy P5648 원자 소멸 시뮬레이션 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-high-sierra-10134-clion&quot;&gt;환경: mac OS High Sierra 10.13.4, CLion&lt;/h3&gt;

&lt;p&gt;이 문제 또한 완전탐색으로 풀려고 합니다.
완전탐색이란 문제의 답을 찾는 것인데, 가능한 경우를 모두 나열하고, 각각이 해가 될 수 있는지 확인하는 방법입니다.&lt;/p&gt;

&lt;p&gt;우선 완전탐색의 장단점을 얘기해보자면
장점으로는 어떻게든 답을 구해낼 수 있다는 것이에요. 모든 경우를 다 살펴보고 해를 구하는 것이니까요.&lt;/p&gt;

&lt;p&gt;이 문제를 통해 알게된 것은 시간복잡도를 계산해보는 습관이 중요하다는 것입니다. 시간 안에 정확히 동작한다면, 그 방법은 좋은 방법입니다.&lt;/p&gt;

&lt;p&gt;물론 더 빠른 방법으로 구현할 수 있으면 그게 최고겠죠.&lt;/p&gt;

&lt;p&gt;[제약 사항]&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;원자들의 수 N 은 1,000개 이하이다. (1≤N≤1,000)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;각 원자들의 보유 에너지 K 는 1 이상 100 이하이다. (1≤K≤100)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;원자들의 처음 위치 [x, y] 는 -1,000 이상 1,000 이하의 정수로 주어진다. (-1,000≤x,y≤1,000)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;원자들은 2차원 평면 위에서 움직이며 원자들이 움직일 수 있는 좌표의 범위에 제한은 없다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;원자들의 이동 방향은 상(0), 하(1), 좌(2), 우(3)로 주어진다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;원자들은 동시에 1초에 이동 방향으로 1만큼 이동한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;원자들의 최초 위치는 서로 중복되지 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;원자들은 2개 이상의 원자들이 서로 충돌할 경우 보유한 에너지를 방출하면서 바로 소멸된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;원자들은 이동 방향은 처음에 주어진 방향에서 바뀌지 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;원자들이 충돌하여 소멸되며 방출되는 에너지는 다른 원자의 위치나 이동 방향에 영향을 주지 않는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 문제는 단순 반복문을 이용한 완전탐색을 사용하였습니다.
50개 테스트 케이스를 3초안에 해결해야하므로,
1초에 1억번 연산을 한다고 가정했을때, 1개의 테스트 케이스에 대한 시간복잡도가 6백만 이하로 나온다고 생각하여 이 방법을 이용해서 구현하였습니다. 즉, 6백만 이상이 되면 시간초과입니다.
이 부분도 고민을 많이 했던 부분입니다.&lt;/p&gt;

&lt;p&gt;우선, 이 문제를 푸는데 정말 오래 걸렸습니다. 쉽게 풀 수 있었는데, 처음에 굉장히 복잡하게 구현했습니다.&lt;/p&gt;

&lt;p&gt;모든 원자가 점에서 충돌하면 좋겠지만 선에서 충돌하는 경우가 발생합니다.&lt;/p&gt;

&lt;p&gt;점에서 충돌한다면 바로 옆에 위치했을때 충돌하는데 1초가 걸리고,&lt;/p&gt;

&lt;p&gt;선에서 충돌한다면 바로 옆에 위치했을때 충돌하는데 0.5초가 걸리죠.&lt;/p&gt;

&lt;p&gt;그래서 각자의 좌표를 2배씩 늘리면 충돌하는데 0.5초가 걸리는 일이 없겠죠.&lt;/p&gt;

&lt;p&gt;그리고 2차원배열을 사용하지 않고 구현했을때는 시간복잡도가 4000(가능한 모든 시간대)*O(N^2)
으로 나와서 시간초과가 나왔는데요.&lt;/p&gt;

&lt;p&gt;여기서 입력값이 음수로 나와서 고민한결과 입력범위가 -1000&amp;lt;= x,y &amp;lt;=1000 이기때문에&lt;/p&gt;

&lt;p&gt;x,y에 1000씩 더해주면 인덱스 처리를 할 수 있게 0&amp;lt;=x, y&amp;lt;=2000 으로 범위가 바뀌게됩니다.&lt;/p&gt;

&lt;p&gt;여기에 좌표를 충돌 체크를 더 쉽게 하기 위해서 2배씩 해줌으로써 0&amp;lt;= x,y&amp;lt;=4000의 맵 크기를 정해놨습니다.&lt;/p&gt;

&lt;p&gt;이제 2차원 배열로 충돌을 체크할 수 있게 되었기 때문에 원자수 : N, O(N^2) -&amp;gt; O(N)으로 바꿀 수 있었습니다.
그럼으로 약 4백만번 안에 동작합니다. 그래서 제한 시간안에 동작하게 됩니다.&lt;/p&gt;

&lt;p&gt;이 문제를 시간초과에서 PASS으로 바꿀 수 있었던 것은 시간복잡도 계산을 통해 가능했다고 생각합니다. 이 문제는 특히 시간복잡도를 처음부터 잘 계산해서 설계했다면 이렇게 힘들지 않았을 겁니다.&lt;/p&gt;

&lt;p&gt;그리고 다들 잘 푸시겠지만, 제가 힘들었던 또 다른 부분은 원자의 이동제한이 없는데, 맵의 크기로 제한을 두어서, WRONG이 계속 나왔었는데,&lt;/p&gt;

&lt;p&gt;원자의 이동 제한이 없습니다. 맵의 크기를 정해놨고 만약 원자가 맵을 나간다면 앞으로도 소멸이 안될 가능성이 매우 높겠죠. 그런 경우에는 에너지를 소멸시켜줍니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AWXRFInKex8DFAUo&amp;amp;categoryId=AWXRFInKex8DFAUo&amp;amp;categoryType=CODE&quot;&gt;원자 소멸 시뮬레이션&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[code]&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;cstdio&amp;gt;
#include&amp;lt;cstring&amp;gt;

using namespace std;


const int MAX = 4000;
const int ELEMENTMAX = 1000;


struct Atom {
    int x;
    int y;
    int dir;
    int energy;
};
//x -&amp;gt; row y -&amp;gt; col UP : col+=1, LEFT: row-1;
int dy[] = {1, -1, 0, 0}; // 0: UP, DOWN, LEFT, RIGHT
int dx[] = {0, 0, -1, 1};

int num, ans;
bool check[MAX + 4][MAX + 4];
int map[MAX + 4][MAX + 4];
Atom atom[MAX + 2];


void go() {

    int turn = 1;

    while (turn &amp;lt;= 4000) {

        int tempEnergy = 0;
        //원소체크 각각 원소 비교

        // 이동

        for (int i = 1; i &amp;lt;= num; ++i) {

            if (atom[i].energy == 0) {
                continue;
            }


            int nextX = dx[atom[i].dir] + atom[i].x;
            int nextY = dy[atom[i].dir] + atom[i].y;
            if (nextX &amp;gt;= 0 &amp;amp;&amp;amp; nextX &amp;lt;=4000 &amp;amp;&amp;amp; nextY &amp;gt;= 0 &amp;amp;&amp;amp; nextY &amp;lt;= 4000) {
//                printf(&quot;%d번째 요소 X: %d, Y: %d, Dir: %d, energy: %d\n&quot;, i, atom[i].x, atom[i].y, atom[i].dir,
//                       atom[i].energy);
                map[atom[i].x][atom[i].y] -= 1;
                atom[i].x = nextX;
                atom[i].y = nextY;
                map[atom[i].x][atom[i].y] += 1;
                if (map[atom[i].x][atom[i].y] &amp;gt; 1) {
                    check[atom[i].x][atom[i].y] = true;
                }
            }else{
                map[atom[i].x][atom[i].y] -= 1;
                atom[i].energy = 0;
            }

        }


        //충돌체크


        for (int i = 1; i &amp;lt;= num; ++i) {


            if (atom[i].energy == 0) {
                continue;
            }

            int tempX = atom[i].x;
            int tempY = atom[i].y;

            if (check[tempX][tempY]) {
                if (map[tempX][tempY] == 1) {
                    check[tempX][tempY] = false;
                }
                map[tempX][tempY] -= 1;
                tempEnergy += atom[i].energy;
                atom[i].energy = 0;
            }
        }



        ans += tempEnergy;
        turn += 1;

        int cnt =1;
        for (int j = 1; j &amp;lt;= num ; ++j) {
            if( atom[j].energy == 0){
                cnt++;
            }
        }

        if( cnt == num){
            return;
        }

    }

}


int main(int argc, char **argv) {
    int test_case;
    int T;

    //freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);
    cin &amp;gt;&amp;gt; T;
    /*
       여러 개의 테스트 케이스가 주어지므로, 각각을 처리합니다.
    */
    for (test_case = 1; test_case &amp;lt;= T; ++test_case) {
        num = 0;
        scanf(&quot;%d&quot;, &amp;amp;num);
        memset(atom, 0, sizeof(struct Atom));
        memset(check, 0, sizeof(check));
        memset(map, 0, sizeof(map));
        ans = 0;
        for (int i = 1; i &amp;lt;= num; ++i) {

            scanf(&quot;%d %d %d %d&quot;, &amp;amp;atom[i].x, &amp;amp;atom[i].y, &amp;amp;atom[i].dir, &amp;amp;atom[i].energy);
            atom[i].x += 1000;
            atom[i].y += 1000;
            atom[i].x *= 2;
            atom[i].y *= 2;
            map[atom[i].x][atom[i].y] += 1;

        }
        go();
        printf(&quot;#%d %d\n&quot;, test_case, ans);
    }
    return 0;//정상종료시 반드시 0을 리턴해야합니다.
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 05 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-10-05/SWExpert-5648</link>
        <guid isPermaLink="true">http://localhost:4000/2018-10-05/SWExpert-5648</guid>
        
        <category>SW 역량테스트</category>
        
        
      </item>
    
      <item>
        <title>SWExpert #1949 등산로 조성</title>
        <description>&lt;h1 id=&quot;목표-swexpertacademy-p1949-등산로-조성-문제-풀기&quot;&gt;목표: SWExpertacademy P1949 등산로 조성 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-high-sierra-10134-clion&quot;&gt;환경: mac OS High Sierra 10.13.4, CLion&lt;/h3&gt;

&lt;p&gt;이 문제 또한 완전탐색으로 풀려고 합니다.
완전탐색이란 문제의 답을 찾는 것인데, 가능한 경우를 모두 나열하고, 각각이 해가 될 수 있는지 확인하는 방법입니다.&lt;/p&gt;

&lt;p&gt;우선 완전탐색의 장단점을 얘기해보자면
장점으로는 어떻게든 답을 구해낼 수 있다는 것이에요. 모든 경우를 다 살펴보고 해를 구하는 것이니까요.
단점은 문제의 조건에 따라 오래 걸린다는 것인데, 이것을 최적화 하는 방법들이 있어요. 가지치기라든지 백트래킹이라든지&lt;/p&gt;

&lt;p&gt;[제약 사항]&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;시간 제한 : 최대 50개 테스트 케이스를 모두 통과하는 데 C/C++/Java 모두 3초&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;지도의 한 변의 길이 N은 3 이상 8 이하의 정수이다. (3 ≤ N ≤ 8)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;최대 공사 가능 깊이 K는 1 이상 5 이하의 정수이다. (1 ≤ K ≤ 5)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;지도에 나타나는 지형의 높이는 1 이상 20 이하의 정수이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;지도에서 가장 높은 봉우리는 최대 5개이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;지형은 정수 단위로만 깎을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;필요한 경우 지형을 깎아 높이를 1보다 작게 만드는 것도 가능하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;

&lt;p&gt;이 문제도 크게 두가지 로직으로 나뉘는데요.&lt;/p&gt;

&lt;p&gt;깍을 산을 선택하는 로직과&lt;/p&gt;

&lt;p&gt;등산로 조성 즉 등산로 길이를 구하는 로직으로 나뉘는데요.&lt;/p&gt;

&lt;p&gt;깍을 산을 선택하는 로직은 N제한이 크지 않기 때문에 2중 for문을 통해서 각각의 산을 K번 깍습니다.&lt;/p&gt;

&lt;p&gt;등산로 조성은 결국 노드를 이동하는 것인데, 노드를 이동하는 것은 그래프의 순회를 이용하면 되는데요.&lt;/p&gt;

&lt;p&gt;그래프 순회로는 가장 간단한 방법 중 DFS,BFS가 있는데, 자기자신보다 낮은 산으로 이동하여, 그 길이를 구하는 것이기 때문에
DFS로 풀기로 결정했어요.&lt;/p&gt;

&lt;p&gt;“나를 먼저 방문하고 그 다음으로 인접한 노드를 차례대로 방문” -&amp;gt; 인접한노드를 차례대로 방문이라는 말은 자기자신 위치를 기준으로
상 하 좌 우로 이동이 가능하며, 자기 자신보다 낮은 산으로 이동해야하는 규칙이 있습니다.&lt;/p&gt;

&lt;p&gt;“단, 방문했던 노드는 방문하지 않는다.”&lt;/p&gt;

&lt;p&gt;일반적인 DFS는 체크배열을 이용해서 이전에 방문한 정점인지 확인하는 노드가 필요한데, 
이 문제에는 자기보다 작은 값으로만 이동가능하다는 특성이 있기 때문에 따로 체크배열을 만들지 않고 
자기자신보다 작으면 이동하는 것으로 체크로직을 대신했습니다.&lt;/p&gt;

&lt;p&gt;이 문제가 의미있다고 생각하는 이유는 브루트포스를 이용해 풀 수 있고,
완전탐색(부르트포스)는 인간의 논리를 넣지않고, 컴퓨터의 연산능력을 이용해 모든 경우의수(등산로 조성이 가능한)를 탐색하라입니다 
단, 입력제한으로 시간복잡도 계산을 통해 시간안에 프로그램이 수행된다고 하면요.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5PoOKKAPIDFAUq&amp;amp;categoryId=AV5PoOKKAPIDFAUq&amp;amp;categoryType=CODE&quot;&gt;등산로 조성&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[code]&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstring&amp;gt;

using namespace std;

const int PEAKMAX = 5;
const int MAX = 20;
int TC, N, K, max1, ans;
int map[MAX][MAX];

int dRow[] = {-1, 0, 1, 0}; //상하좌우 이동을 위한 배열
int dCol[] = {0, 1, 0, -1};

pair&amp;lt;int, int&amp;gt; highestPoint[PEAKMAX];

void DFS(int row, int col, int cnt) {
    //봉우리의 위치에서부터 등산로 조성하고 등산로 길이 갱신하는 함수

    for (int i = 0; i &amp;lt; 4; ++i) {
        int nextRow = row + dRow[i];
        int nextCol = col + dCol[i];

        if (nextRow &amp;gt;= 0 &amp;amp;&amp;amp; nextRow &amp;lt; N &amp;amp;&amp;amp; nextCol &amp;gt;= 0 &amp;amp;&amp;amp; nextCol &amp;lt; N) {
            if (map[nextRow][nextCol] &amp;lt; map[row][col]) {
//                cout&amp;lt;&amp;lt;&quot;row: &quot;&amp;lt;&amp;lt;nextRow&amp;lt;&amp;lt;&quot;, col: &quot;&amp;lt;&amp;lt;nextCol&amp;lt;&amp;lt;&quot;인 &quot;&amp;lt;&amp;lt;map[nextRow][nextCol]&amp;lt;&amp;lt;&quot;에 방문\n&quot;;
                DFS(nextRow, nextCol, cnt + 1);
                if (cnt + 1 &amp;gt; ans) {
                    ans = cnt + 1;
                }
            }
        }
    }
}

int main() {
    cin &amp;gt;&amp;gt; TC;

    int cnt = 0;


    for (int T = 1; T &amp;lt;= TC; ++T) {
        cin &amp;gt;&amp;gt; N &amp;gt;&amp;gt; K;

        max1 = 0;
        ans = 0;
        cnt = 0;

        for (int i = 0; i &amp;lt; N; ++i) {
            for (int j = 0; j &amp;lt; N; ++j) {
                cin &amp;gt;&amp;gt; map[i][j];

                //  미리 봉우리 위치를 저장해두고

                if (max1 &amp;lt; map[i][j]) {
                    max1 = map[i][j];
                    memset(highestPoint, 0, sizeof(highestPoint));
                    cnt = 0;
                    highestPoint[cnt].first = i;
                    highestPoint[cnt].second = j;
                    cnt += 1;
                } else if (max1 == map[i][j]) {
                    highestPoint[cnt].first = i;
                    highestPoint[cnt].second = j;
                    cnt += 1;
                }
            }
        }

        for (int k = 0; k &amp;lt; N; ++k) {
            for (int i = 0; i &amp;lt; N; ++i) {
                for (int j = 1; j &amp;lt;= K; ++j) {

                    //2중 for문을 통해 각각의 산을 다 깍아보면서

                    map[k][i] -= j;
//                        cout&amp;lt;&amp;lt;&quot;row: &quot;&amp;lt;&amp;lt;k&amp;lt;&amp;lt;&quot;, col:&quot;&amp;lt;&amp;lt;i&amp;lt;&amp;lt;&quot; 을 &quot;&amp;lt;&amp;lt;j&amp;lt;&amp;lt;&quot;만큼 깍아서 &quot;&amp;lt;&amp;lt;map[k][i]&amp;lt;&amp;lt;&quot;로 깍였음\n&quot;;

                    for (int l = 0; l &amp;lt; cnt; ++l) {

                        //각각의 봉우리 위치에서 DFS를 수행한다.

                        int row = highestPoint[l].first;
                        int col = highestPoint[l].second;
//                            cout&amp;lt;&amp;lt;&quot;row: &quot;&amp;lt;&amp;lt;row&amp;lt;&amp;lt;&quot;, col: &quot;&amp;lt;&amp;lt;col&amp;lt;&amp;lt;&quot;인 &quot;&amp;lt;&amp;lt;map[row][col]&amp;lt;&amp;lt;&quot;에 방문\n&quot;;
                        DFS(row, col, 1);
//                            cout&amp;lt;&amp;lt;&quot;봉우리 높이:&quot;&amp;lt;&amp;lt;map[row][col]&amp;lt;&amp;lt;&quot;에서&quot;&amp;lt;&amp;lt;&quot; row: &quot;&amp;lt;&amp;lt;row&amp;lt;&amp;lt;&quot;, col: &quot;&amp;lt;&amp;lt;col&amp;lt;&amp;lt;&quot;, 현재 제일 긴 등산로 길이: &quot;&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;&quot;입니다\n&quot;;
                    }

                    //깍았던 산을 원상복귀 시킨다. 백트래킹의 경우 함수 호출전에 상태를 바꿨으면 함수 호출 후 상태를 원복 시켜야 각각의 경우의 수가 독립적인 탐색을 한다고 볼 수 있음.
                    map[k][i] += j; 



                }
            }
        }

        cout &amp;lt;&amp;lt; &quot;#&quot; &amp;lt;&amp;lt; T &amp;lt;&amp;lt; &quot; &quot; &amp;lt;&amp;lt; ans &amp;lt;&amp;lt; &quot;\n&quot;;

    }


    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 04 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-10-04/SWExpert-1949</link>
        <guid isPermaLink="true">http://localhost:4000/2018-10-04/SWExpert-1949</guid>
        
        <category>SW 역량테스트</category>
        
        
      </item>
    
      <item>
        <title>Sublime Text 서브라임 텍스트를 터미널에서 실행하기</title>
        <description>&lt;h1 id=&quot;목표-sublime-을-터미널에서-실행하기&quot;&gt;목표: sublime 을 터미널에서 실행하기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-high-sierra-10134-submlime-text3&quot;&gt;환경: mac OS High Sierra 10.13.4, Submlime text3&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://beomi.github.io/2017/07/04/Call-Sublime-from-Terminal/&quot;&gt;참조&lt;/a&gt;
위 블로그에 정말 자세히 나와있는데, 따라해도 잘 안되서 구글링을 더 해본결과&lt;/p&gt;

&lt;h3 id=&quot;sublime-text-설치-확인&quot;&gt;sublime Text 설치 확인&lt;/h3&gt;
&lt;p&gt;터미널을 키고 아래 명령어를 입력해서 설치 확인해봅니다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# SublimeText3 의 경우
open /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서브라임 텍스트 프로그램이 실행된다면&lt;/p&gt;

&lt;p&gt;다시 터미널에 아래 코드를 입력해줍니다.&lt;/p&gt;

&lt;p&gt;[code]&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm /usr/local/bin/subl;
sudo ln -s &quot;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&quot; /usr/local/bin/subl;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 04 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-10-04/CallSublimeFromTerminal</link>
        <guid isPermaLink="true">http://localhost:4000/2018-10-04/CallSublimeFromTerminal</guid>
        
        <category>SublimeText</category>
        
        <category>Terminal</category>
        
        
      </item>
    
      <item>
        <title> SWEA 삼성 모의 SW역량테스트 2112 보호 필름  </title>
        <description>&lt;h1 id=&quot;목표-swexpert-academy-모의-sw-역량테스트-2112-보호-필름-문제-풀기&quot;&gt;목표: SWexpert academy 모의 SW 역량테스트 2112 보호 필름 문제 풀기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-high-sierra-10134-clion&quot;&gt;환경: mac OS High Sierra 10.13.4, CLion&lt;/h3&gt;

&lt;p&gt;이 문제 또한 완전탐색으로 풀려고 합니다.
완전탐색이란 문제의 답을 찾는 것인데, 가능한 경우를 모두 나열하고, 각각이 해가 될 수 있는지 확인하는 방법입니다.&lt;/p&gt;

&lt;p&gt;우선 완전탐색의 장단점을 얘기해보자면
장점으로는 어떻게든 답을 구해낼 수 있다는 것이에요. 모든 경우를 다 살펴보고 해를 구하는 것이니까요.
단점은 문제의 조건에 따라 오래 걸린다는 것인데, 이것을 최적화 하는 방법들이 있어요. 가지치기라든지 백트래킹이라든지&lt;/p&gt;

&lt;p&gt;[제약사항]&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;시간제한 : 최대 50개 테스트 케이스를 모두 통과하는데, C/C++/Java 모두 5초&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보호 필름의 두께 D는 3이상 13이하의 정수이다. (3≤D≤13)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보호 필름의 가로크기 W는 1이상 20이하의 정수이다. (1≤W≤20)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;합격기준 K는 1이상 D이하의 정수이다. (1≤K≤D)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;셀이 가질 수 있는 특성은 A, B 두 개만 존재한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/15686&quot;&gt;치킨배달&lt;/a&gt;문제와 굉장히 비슷한 개념을 물어보는 문제인데요.&lt;/p&gt;

&lt;p&gt;이 문제에서는 D층에 시료를 추가해서 안전한 보호필름을 만드는 것이 중요한데,
이 문제에서는 몇개의 시료를 추가해야하는지 주어지지 않았습니다. 그 말은 0개부터 D개까지 다 넣어보면서 안전한 보호필름인지 체크하라는 것인데요.&lt;/p&gt;

&lt;p&gt;크게 두가지 로직으로 나뉠 수 있는데,&lt;/p&gt;

&lt;p&gt;몇개의 시료를 추가할거냐?와 몇개이 시료를 추가할거냐는 치킨배달 문제에서 n개의 체인점 중에서 m개를 구하는 방법과 똑같은데, 거기에 플러스 m개가 주어지지 않았기 때문에 0~D개까지 다해보는겁니다.&lt;/p&gt;

&lt;p&gt;약품검사를 어떻게 할것인가?로 나뉘는데요.  약품검사는 재귀를 돌면서 계속해서 해야하는 체크로직이기 때문에 효율적이여야합니다.
약품검사의 경우는 문제의 정의대로 보면 약품검사를 하다가 안전하지 않은 열을 찾았으면
그 뒤에 있는 열을 계속 검사할 필요가 없습니다. 약품검사를 그만두는 코드가 꼭 필요합니다.&lt;/p&gt;

&lt;p&gt;여기서 중요하게 완전탐색은 그러면 인간의 논리를 넣지않고, 컴퓨터의 연산능력을 이용해 가능한 모든 경우의수를 탐색하되,&lt;/p&gt;

&lt;p&gt;재귀함수도 마찬가지고 구현문제도 마찬가지고 더이상 안돌아봐야할 경우가 매우 확실해 지잖아요? 그건 돌아보면 안됩니다. 절대로&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5V1SYKAaUDFAWu&amp;amp;categoryId=AV5V1SYKAaUDFAWu&amp;amp;categoryType=CODE&quot;&gt;보호 필름&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[code]&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
 
 
using namespace std;
 
const int ROWMAX = 13;
const int COLMAX = 20;
 
int TC, K, D, W;
int map[ROWMAX+1][COLMAX+1];
int ans;
 
bool checkRow(int col){
    bool ret = false;
    int cnt = 0;
    int temp = map[0][col];
    for (int j = 0; j &amp;lt; D; ++j) {
        if(map[j][col] == temp){
            cnt+=1;
 
            if( cnt &amp;gt;= K){
                ret = true;
                return ret;
            }
        }else{
 
            temp = map[j][col];
            cnt =1;
        }
 
 
    }
 
    if( cnt &amp;lt; K){
        ret = false;
    }
    return ret;
}
 
void go(int curRow, int inputCnt, int goal){
 
 
 
    // curRow까지 inputCnt약을 투입했을때 약품이 안전하면 ans값을 갱신하는 함수
    if( curRow &amp;gt; D){
        return;
    }
 
    if( inputCnt == goal){
        // 약품 검사
        int colCnt = 0;
        for (int i = 0; i &amp;lt; W; ++i) {
 
            if(checkRow(i)){
                colCnt += 1;
            }else{
                return;
            }
 
        }
        if( colCnt == W){
            ans = inputCnt;
            return;
        }
    }
 
    //아무것도 투입안했음
    go(curRow+1, inputCnt, goal);
 
    //curRow에 A시약 투입
    int temp[COLMAX];
    memset(temp, 0, sizeof(temp));
    for (int j = 0; j &amp;lt; W ; ++j) {
        temp[j] = map[curRow][j];
        map[curRow][j] = 0;
    }
    go(curRow+1, inputCnt+1, goal);
    for (int j = 0; j &amp;lt; W ; ++j) {
        map[curRow][j] = temp[j];
    }
 
 
    //curCol에 B시약 투입
    memset(temp, 0, sizeof(temp));
    for (int j = 0; j &amp;lt; W ; ++j) {
        temp[j] = map[curRow][j];
        map[curRow][j] = 1;
    }
    go(curRow+1, inputCnt+1, goal);
    for (int j = 0; j &amp;lt; W ; ++j) {
        map[curRow][j] = temp[j];
    }
 
}
 
int main() {
 
    cin &amp;gt;&amp;gt; TC;
 
    for (int T = 1; T &amp;lt;= TC ; ++T) {
        cin &amp;gt;&amp;gt; D &amp;gt;&amp;gt; W &amp;gt;&amp;gt; K;
 
        for (int i = 0; i &amp;lt; D; ++i) {
            for (int j = 0; j &amp;lt; W; ++j) {
                cin &amp;gt;&amp;gt; map[i][j];
            }
        }
 
        ans = D;
 
        for (int i = 0; i &amp;lt;= D; ++i) {
            go(0,0,i);
            if( ans &amp;lt; D){
                break;
            }
        }
        cout&amp;lt;&amp;lt;&quot;#&quot;&amp;lt;&amp;lt;T&amp;lt;&amp;lt;&quot; &quot;&amp;lt;&amp;lt;ans&amp;lt;&amp;lt;&quot;\n&quot;;
    }
 
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 03 Oct 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-10-03/SWExpertP2112</link>
        <guid isPermaLink="true">http://localhost:4000/2018-10-03/SWExpertP2112</guid>
        
        <category>SW 역량테스트</category>
        
        <category>SWexpert academy</category>
        
        
      </item>
    
      <item>
        <title> 백준 15684 사다리조작 브루트포스로 풀기 </title>
        <description>&lt;h1 id=&quot;목표-백준-온라인-저지--15674-사다리조작-문제해결&quot;&gt;목표: 백준 온라인 저지 : 15674 사다리조작 문제해결&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-high-sierra-10134-clion&quot;&gt;환경: mac OS High Sierra 10.13.4, CLion&lt;/h3&gt;

&lt;p&gt;이 문제 또한 완전탐색으로 풀려고 합니다.
완전탐색이란 문제의 답을 찾는 것인데, 가능한 경우를 모두 나열하고, 각각이 해가 될 수 있는지 확인하는 방법입니다.&lt;/p&gt;

&lt;p&gt;우선 완전탐색의 장단점을 얘기해보자면
장점으로는 어떻게든 답을 구해낼 수 있다는 것이에요. 모든 경우를 다 살펴보고 해를 구하는 것이니까요.
단점은 문제의 조건에 따라 오래 걸린다는 것인데, 이것을 최적화 하는 방법들이 있어요. 가지치기라든지 백트래킹이라든지&lt;/p&gt;

&lt;h3 id=&quot;로직&quot;&gt;로직&lt;/h3&gt;

&lt;p&gt;크게 두가지로 나뉩니다. 사다리 두기, i번째 사다리 상단 출발해서 i번째 사다리 하단으로 도착하는지 체크하기&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;사다리 두기
0,0부터 시작해서 N-1,H-1 까지 main함수에서 가능한 애초에 둘 사다리 개수를 가지고 go함수를 들어갑니다.
go함수 내부에 2중 for문 돌면서 둘 수 있는 공간에 사다리를 둡니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;문제의 조건이 행의 수: 2&amp;lt;= N &amp;lt;= 10 열의 수 1 ≤ H ≤ 30 이므로
최대 배열크기가 300인 애들을 확인해보면 되요.
사다리가 0개인 경우 300C0, 사다리가 1개인 경우 300C1, 2개인 경우 300C2 .. 최대 3개니까 300C3&lt;/p&gt;

&lt;p&gt;사다리 두기 : 300&lt;em&gt;299&lt;/em&gt;298/ 3&lt;em&gt;2&lt;/em&gt;1 = 약 4백만 충분히 모든 경우의 수를 다 다룰 수 있습니다.&lt;/p&gt;

&lt;p&gt;여기서 제가 처음 설계해서 시간초과 나온코드에는 사다리를 두기전에 가능한 경우인지 체크하잖아요.&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 O(1) 만에 할 수 있는데, 해당하는 1차원 배열을 다 돌았어요. 그래서 이 문제 이후에는
보통 이런 체크로직에서 시간복잡도를 줄일 수 있는지 설계할때부터 생각을 하게 되었습니다.&lt;/p&gt;

&lt;p&gt;그리고 항상 사다리 두고 재귀함수 호출한 후에, 재귀함수가 끝나면 
for문으로 해당 열을 다 돌면서 사다리 둘지 보잖아요.&lt;/p&gt;

&lt;p&gt;for문의 다음 인덱스에 사다리 둘 것이기 때문에 재귀함수 끝났으면 
재귀함수 호출 전에 두었던 사다리를 제거하는 코드가 꼭 들어가야됩니다.(백트래킹이죠.)&lt;/p&gt;

&lt;p&gt;그리고 만약에 시뮬레이션(i번째 사다리 상단에 출발해서 i번째 사다리 하단에 도착하는지 체크)이 성공하면
더이상 사다리를 두지않고 종료해버리기 때문에 300Cn 이 온전히 계산되지 않죠.&lt;/p&gt;

&lt;p&gt;그래서 시간복잡도 계산한것보다 훨씬 빠르게 프로그램이 수행될겁니다.
전체의 경우의 수만큼 두다가 되면 그만 둬버리니까요.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;시뮬레이션(i번째 사다리 상단에 출발해서 i번째 사다리 하단에 도착하는지 체크)
2중 for 돌기때문에 수행되는 시간복잡도 O(N^2) = 300
그러나 시뮬레이션 중에 하나라도 틀리면 나가리기 때문에 break 코드가 들어가서 온전히 O(N^2)이 절대 나올 수 없습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여기서 중요하게 생각했던 부분은 시간복잡도가 1억번이하다. 무식하지만 안전한 방법이 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/15684&quot;&gt;사다리조작&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[code]&lt;/p&gt;
&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;climits&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAXROW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAXCOL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAXROW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAXCOL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//좌우 패딩&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//열의수, 주어진 사다리 수, 행의 수&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;corret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 열 반복&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//행 반복&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;corret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//하나라도 다르면 의미없음.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;corret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// rowPos부터 사다리 cnt를 추가하여 i번째 열이 사다리 타고 i번째로 갔는지 확인하는 함수&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 행 반복&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 열 반복 마지막 열에는 사다리 추가의미 없&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d %d %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INT_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 28 Sep 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-09-28/backjoonP15684</link>
        <guid isPermaLink="true">http://localhost:4000/2018-09-28/backjoonP15684</guid>
        
        <category>SW 역량테스트</category>
        
        <category>백준 온라인 저지</category>
        
        
      </item>
    
      <item>
        <title> 분할정복 알고리즘 :: 가장 가까운 두 점 찾기 문제</title>
        <description>&lt;h1 id=&quot;목표-분할정복-알고리즘을-적용하여-가장-가까운-두-점-찾기-문제-해결하기&quot;&gt;목표: 분할정복 알고리즘을 적용하여 가장 가까운 두 점 찾기 문제 해결하기&lt;/h1&gt;
&lt;h2 id=&quot;환경-mac-os-high-sierra-10134&quot;&gt;환경: mac OS High Sierra 10.13.4&lt;/h2&gt;

&lt;p&gt;가장 가까운 두 점을 찾는 간단한 방법은 ‘모든 경우를 다 점검해 보는 것’입니다. 즉, 모든 점 사이의 거리를 구해보는 것입니다. 
만약 점의 개수가 n개라면 O(nC2) = O(n(n-1)/2) = O((n^2-n)/2) = O(n^2)
시간복잡도 n^2을 보면 성능이 나쁘지 않다고 볼 수 있습니다. 하지만, 분할 정복 알고리즘을 사용하면 이보다 더 빨리 ‘가장 가까운 두 점’을 찾을 수 있습니다.&lt;/p&gt;

&lt;p&gt;//분할 정복 알고리즘의 의사코드
//points 점들의 배열(단, x 좌표로 오름차순 정렬되어있음)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;closetPairRecursive(points){
	if( 점들의 개수 &amp;lt;= 3){
		result &amp;lt;- 모든 경우에 대해 최소 거리를 계산
	}

	가운데 점을 기준으로 points를 points_L과 points_R로 분할

	dL = closestPairRecursive( points_L)
	dR = closestPairRecursive( points_R)
	dC = 중간 영역의 점들에서 가장 가까운 거리 구하기

	result = min(dL, dR, dC)

	return result
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 28 Sep 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-09-28/ClosetPairProblem</link>
        <guid isPermaLink="true">http://localhost:4000/2018-09-28/ClosetPairProblem</guid>
        
        <category>분할정복</category>
        
        <category>알고리즘</category>
        
        
      </item>
    
      <item>
        <title>xCode에서 여러개의 main 메서드를 사용하기</title>
        <description>&lt;h1 id=&quot;목표-xcode에서-여러개의-main-메서드를-사용하기&quot;&gt;목표: xCode에서 여러개의 main 메서드를 사용하기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-high-sierra-10134-xcode94&quot;&gt;환경: mac OS High Sierra 10.13.4, Xcode9.4&lt;/h3&gt;

&lt;p&gt;File -&amp;gt; New -&amp;gt; Target… 그리고 macOS탭에서 Application -&amp;gt; Command Line Tool
next -&amp;gt; Product name 입력후 -&amp;gt; finish&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/O3SQ1.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실행할때는 navigator 위에있는 target scheme만 바꿔주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/fEds5.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;원래는 여러개의 타겟 접근은 앱에서 여러 코드를 공유할때 쓰이지만, 이런 상황에서도 사용된다.&lt;/p&gt;

&lt;p&gt;다른 방법이 한개 더 있는데 참조한 사이트에 있음.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/Ilkhq.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/40006218/xcode-multiple-main-methods&quot;&gt;참조&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;그러면 target은 뭔가?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;workspace는 한개 또는 그 이상의 프로젝트를 가진다. 보통 이 프로젝트는 연관이 있음.&lt;/li&gt;
  &lt;li&gt;project는 코드와 리소스 등등을 가진다.&lt;/li&gt;
  &lt;li&gt;target은 각 프로젝트는 한개 이상의 targets을 갖는다.
    &lt;ul&gt;
      &lt;li&gt;각각의 target은 프로젝트에 대한 빌드 세팅을 정의한다.&lt;/li&gt;
      &lt;li&gt;각각의 target은 클래스들과 리소스들 그리고 사용자 정의 스크립트 등 빌드에 필요한 것들을 정의한다.&lt;/li&gt;
      &lt;li&gt;여러개의 targets은 같은 프로젝트에서 다른 버전의 배포를 할때 사용된다.
        &lt;ul&gt;
          &lt;li&gt;예를 들어, my project에 두개의 targets을 갖고 있다. 그리고  “normal”빌드와 “office”빌드는 각각 다른 기능을 추가하여 테스트해야하는데, targets를 바꿈으로써 손쉽게 테스트를 할 수 있음.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;scheme은 빌드, 테스트, 프로파일을 누를 때 일어난다.
    &lt;ul&gt;
      &lt;li&gt;보통 target하나당 적어도 하나의 scheme을 갖는다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;target은 다른 내용을 더 봐야 이해가 될듯..
&lt;a href=&quot;https://stackoverflow.com/questions/20637435/xcode-what-is-a-target-and-scheme-in-plain-language&quot;&gt;참조&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jun 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-06-23/multiplemainmethodinxcode</link>
        <guid isPermaLink="true">http://localhost:4000/2018-06-23/multiplemainmethodinxcode</guid>
        
        <category>Xcode9</category>
        
        <category>c</category>
        
        
      </item>
    
      <item>
        <title>swift4, xcode9 에서 외부라이브러리 연동하기</title>
        <description>&lt;h1 id=&quot;목표-xcode9에-fscalendar-연동하기&quot;&gt;목표: xcode9에 FSCalendar 연동하기&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-high-sierra-10134-xcode94&quot;&gt;환경: mac OS High Sierra 10.13.4, Xcode9.4&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/WenchaoD/FSCalendar&quot;&gt;추가하려는 외부라이브러리&lt;/a&gt;
&lt;a href=&quot;http://zeddios.tistory.com/25&quot;&gt;cocoapods사용법&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;cocoapods 사용법에 대해서는 위의 참조에 너무 친절하게 나와있음.
외부 라이브러리를 관리하는 프로그램인데요. 맥은 루비가 기본으로 설치되어있기 때문에
루비를 이용해 설치하고 사용합니다.&lt;/p&gt;

&lt;p&gt;다만 문제가 있었는데 추가하려는 외부라이브러리 ‘FSCalendar’ Readme에 나온대로 읽고 그대로 따라했는데&lt;/p&gt;

&lt;h2 id=&quot;문제-no-such-module-fscalender&quot;&gt;문제: no such module ‘FSCalender’&lt;/h2&gt;

&lt;p&gt;역시나 그냥 되는건 없죠. 이 문제가 발생했지요. 구글링을 해봐도 나한테 해당되는 방법이 아니었는데,
iOS에 대해서 모르는게 많아서 발생한 문제였음.&lt;/p&gt;

&lt;p&gt;##해결: xcode 메뉴바 -&amp;gt; Product -&amp;gt; Scheme -&amp;gt; FSCalendar -&amp;gt; Run(command + R)&lt;/p&gt;

&lt;p&gt;막 이것저것 해보다가 문제해결.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Jun 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-06-06/externalLibrarybycocoapods</link>
        <guid isPermaLink="true">http://localhost:4000/2018-06-06/externalLibrarybycocoapods</guid>
        
        <category>Xcode9</category>
        
        <category>FSCalendar</category>
        
        
      </item>
    
      <item>
        <title> 자주 사용하는 콘솔 명령어 정리</title>
        <description>&lt;h1 id=&quot;목표-콘솔을-이용해보자&quot;&gt;목표: 콘솔을 이용해보자&lt;/h1&gt;
&lt;h2 id=&quot;환경-mac-os-high-sierra-10134&quot;&gt;환경: mac OS High Sierra 10.13.4&lt;/h2&gt;

&lt;p&gt;각 OS에서 터미널을 실행한다.
터미널이 실행된 화면을 보면
YOSEPHui-MacBook-Pro:firstProject yosephnoh$ 라는 글자는 프롬프트 라고 부른다.
사용자로부터 명령을 입력 받는 역할을 담당한다. 프롬프트에 적혀있는 단어들의 의미는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;사용자ID@컴퓨터명:현재디렉토리$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현재 디렉토리명에 물결(~)표시가 있는데 이는 관례적으로 리눅스에서 사용자의 홈 디렉토리를 나타낸다.
마지막으로 $표시도 의미가 있다. $는 현재 사용하고 있는 계정의 권한이 일반 사용자임을 나타낸다. 일반 사용자 외에 최고 권한
사용자도 있는데 이를 root라고 부른다. root계정을 사용하면 #표시로 바뀌게 된다. 사용자 권한에 관한 이야기는 추후에
검색을 통해 살펴보도록하자.&lt;/p&gt;

&lt;p&gt;terminal 을 종료하는 방법은&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;특수기호 ($) 뒤쪽에 있는 글자만 키보드로 입력하면 된다.&lt;/p&gt;

&lt;p&gt;지금까지 콘솔창을 사용하기 위한 기본 설명을 진행했다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;&lt;center&gt;명령어&lt;/center&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;center&gt;설명&lt;/center&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;&lt;center&gt;예제&lt;/center&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;pwd&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;center&gt;디렉토리 이동&lt;/center&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;/Users/사용자명/Documents/IOSLab/firstProject&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;cd ..&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;center&gt;현재 디렉토리의 상위 디렉토리로 이동&lt;/center&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;/Users/사용자명/Downloads/IOSLab&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;cd ~&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;center&gt;사용자의 홈 디렉토리로 이동 &lt;/center&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;/Users/사용자명&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Tue, 05 Jun 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-06-05/commandsofConsole</link>
        <guid isPermaLink="true">http://localhost:4000/2018-06-05/commandsofConsole</guid>
        
        <category>mac</category>
        
        <category>console</category>
        
        
      </item>
    
      <item>
        <title>ios xcode에서 github에 소스 올리기</title>
        <description>&lt;p&gt;#목표: xcode로 github소스올리기
##버전 : xcode 9.3.1&lt;/p&gt;

&lt;p&gt;xcode new project를 만드는 과정에서 경로지정하는 탭에서&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-06-02-1.39.55.png&quot; alt=&quot;img1&quot; /&gt;
이 부분을 체크합니다.&lt;/p&gt;

&lt;p&gt;새 폴더를 만들면 활성화 됩니다.&lt;/p&gt;

&lt;p&gt;깃헙 리파지토리 만들기&lt;/p&gt;

&lt;p&gt;왼쪽에 보이는 네이게이션 영역에서&lt;/p&gt;

&lt;p&gt;네비게이션 영역의 source control navigator에서 해당 프로젝트 우측클릭
&lt;img src=&quot;/img/2018-06-02-1.40.10.png&quot; alt=&quot;img2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;create &lt;프로젝트이름&gt; remote on github...&lt;/프로젝트이름&gt;&lt;/p&gt;

&lt;p&gt;그러면 깃헙 계정에 리파지토리 만들어집니다.&lt;/p&gt;

&lt;p&gt;깃헙 계정 설정은&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2018-06-02-1-40-19.png&quot; alt=&quot;img3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Preferences..  클릭후 Account탭에서 github 계정 넣고, Clone using HTTP…&lt;/p&gt;

&lt;p&gt;ssh key는 자동으로 만들어주는 버튼을 클릭합니다.&lt;/p&gt;

&lt;p&gt;나머지는 다른 IDE와 비슷한 방식이므로 생략합니다.&lt;/p&gt;

&lt;h2 id=&quot;추가내용&quot;&gt;추가내용&lt;/h2&gt;
&lt;p&gt;꼭 xCode를 이용하지 않고 git을 이용하는게 더 나은 편한 방법 같음..&lt;/p&gt;

&lt;p&gt;참조: https://www.youtube.com/watch?v=cVBECn2j-iQ&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jun 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-06-01/xcodeuploadingtogithub</link>
        <guid isPermaLink="true">http://localhost:4000/2018-06-01/xcodeuploadingtogithub</guid>
        
        <category>xcode</category>
        
        <category>github</category>
        
        
      </item>
    
      <item>
        <title>Jekyll에 태그랑 아카이브 페이지 추가하기</title>
        <description>&lt;h1 id=&quot;목표-jekyll-테마로-만든-깃헙블로그에-태그-기능추가하기&quot;&gt;목표: jekyll 테마로 만든 깃헙블로그에 태그 기능추가하기&lt;/h1&gt;
&lt;h3 id=&quot;버전--mac-os-high-sierra-10134&quot;&gt;버전 : mac OS High Sierra 10.13.4&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.meinside.pe.kr/Adding-tag-cloud-and-archives-page-to-Jekyll/&quot;&gt;참조&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;참조한 사이트를 그대로 따라했습니다.&lt;/p&gt;

&lt;h2 id=&quot;1-로컬-깃허브블로그-페이지를-만든다&quot;&gt;1. 로컬 깃허브블로그 페이지를 만든다.&lt;/h2&gt;
&lt;p&gt;tags.md 파일 블로그폴더 루트 디렉토리에 만듭니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;---
layout: page
permalink: /tags/
---

&amp;lt;ul class=&quot;tag-cloud&quot;&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site.tags&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &amp;lt;li style=&quot;font-size: &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;divided_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;site.tags.size&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;%&quot;&amp;gt;
    &amp;lt;a href=&quot;#&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slugize&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;&amp;gt;
      &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
    &amp;lt;/a&amp;gt;
  &amp;lt;/li&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&amp;lt;/ul&amp;gt;

&amp;lt;div id=&quot;archives&quot;&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site.tags&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &amp;lt;div class=&quot;archive-group&quot;&amp;gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;capture&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endcapture&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
    &amp;lt;h3 id=&quot;#&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slugize&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;&amp;gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&amp;lt;/h3&amp;gt;
    &amp;lt;a name=&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag_name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slugize&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;&amp;gt;&amp;lt;/a&amp;gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site.tags[tag_name]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
    &amp;lt;article class=&quot;archive-item&quot;&amp;gt;
      &amp;lt;h4&amp;gt;&amp;lt;a href=&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;root_url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;&amp;gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
    &amp;lt;/article&amp;gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &amp;lt;/div&amp;gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-태그를-포스트에-보여주기&quot;&gt;2. 태그를 포스트에 보여주기&lt;/h2&gt;
&lt;p&gt;포스트에 추가될 include 파일을 만듭니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch _includes/post-tags.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아래의 내용으로:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&amp;lt;div class=&quot;post-tags&quot;&amp;gt;
  Tags:
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endif&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &amp;lt;a href=&quot;/tags/#&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slugize}}&quot;&amp;gt;{{tag}}&amp;lt;/a&amp;gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;unless&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;forloop.last&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;,&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;endunless&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&amp;lt;/div&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그리고&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_layouts/post.html 파일을 오픈해서
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적당한 곳에 include해줍니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&amp;lt;div class=&quot;post&quot;&amp;gt;
  &amp;lt;div class=&quot;post-info&quot;&amp;gt;
    ...
  &amp;lt;/div&amp;gt;

  &amp;lt;h1 class=&quot;post-title&quot;&amp;gt; ...

  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post-tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt; // &amp;lt;- here

  &amp;lt;div class=&quot;post-line&quot;&amp;gt; ...

&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3-태그-클라우드랑-아카이브를-꾸며줄-css-file-생성-기존테마-폴더에-stylescss-파일이-있으면-생성하지말고-사용하세요&quot;&gt;3. 태그 클라우드랑 아카이브를 꾸며줄 css file 생성 기존테마 폴더에 styles.css 파일이 있으면 생성하지말고 사용하세요.&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$touch styles.css

// 수정 할때는
$vi styles.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;/ for tag cloud and archives
.tag-cloud {
  list-style: none;
  padding: 0;
  text-align: justify;
  font-size: 16px;
  li {
    display: inline-block;
    margin: 0 12px 12px 0;
  }
}
#archives {
  padding: 5px;
}
.archive-group {
  margin: 5px;
  border-top: 1px solid #ddd;
}
.archive-item {
  margin-left: 5px;
}
.post-tags {
  text-align: right;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;4-포스팅할때-태그붙이기&quot;&gt;4. 포스팅할때 태그붙이기&lt;/h2&gt;
&lt;p&gt;이것은 예입니다:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;---
layout: post
title: This is an example.
tags:  // &amp;lt;- here you go
- jekyll
- example
published: true
---

This is a post for an example.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;5-메인화면에-tags-보여주기&quot;&gt;5. 메인화면에 Tags 보여주기&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_layouts/default.html 들어간 다음
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;...
  &amp;lt;body&amp;gt;
    &amp;lt;nav class=&quot;nav&quot;&amp;gt;
        ...
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;/tags&quot;&amp;gt;Tags&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;  &amp;lt;!-- &amp;lt;-here yo go --&amp;gt;
          &amp;lt;li&amp;gt;&amp;lt;a href=&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;/&quot;&amp;gt;Posts&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/nav&amp;gt;

    &amp;lt;footer&amp;gt;
      ...
    &amp;lt;/footer&amp;gt;
  &amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 01 Jun 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-06-01/addingtagcloudandacrhivespagetojekyll</link>
        <guid isPermaLink="true">http://localhost:4000/2018-06-01/addingtagcloudandacrhivespagetojekyll</guid>
        
        <category>jeykll</category>
        
        <category>githubpage</category>
        
        <category>tags</category>
        
        
      </item>
    
      <item>
        <title>텐서플로우를 주피터 노트북에서 실행</title>
        <description>&lt;h1 id=&quot;목표-텐서플로우를-주피터-노트북에서-실행&quot;&gt;목표: 텐서플로우를 주피터 노트북에서 실행&lt;/h1&gt;
&lt;h3 id=&quot;환경-mac-os-macos-high-sierra-10134&quot;&gt;환경: Mac OS macOS High Sierra 10.13.4&lt;/h3&gt;

&lt;p&gt;결국 주피터노트북하고 파이썬3는
아나콘다로 설치함..
3.6버전을 인터넷으로 다운로드 받아서 설치함.&lt;/p&gt;

&lt;p&gt;아나콘다 3.6 버전을 가지고
파이썬3.6 버전 설치했고, 3.5버전이 커버된다고 사이트에 써있음..&lt;/p&gt;

&lt;p&gt;터미널에서 아나콘다 설치&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ conda install -c anaconda jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;참고: https://anaconda.org/anaconda/jupyter&lt;/p&gt;

&lt;p&gt;텐서플로우 설치 ( 아나콘다 3.6 설치했다는 가정하에)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ conda create -n tensor flow python=3.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;텐서플로우 실행 준비&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source activate tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;프롬프트가 (tensorflow)로 변함&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(tensorflow)$ condo install -c conda-forge tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그럼 설치된다. 설치후&lt;/p&gt;

&lt;p&gt;텐서플로 환경 비활성화&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 설치가 다 되었으니, 텐서플로우를 실행하려면 텐서플로 환경 활성&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source activate tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주피터 노트북 설치 (기존 Jupiter notebook 제거할 필요없음)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(tensorflow)$ conda install jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 주피터를 실행해서 tensorflow 사용하고싶으면 먼저 활성화 시키고
Jupyter 실행하면 된다.&lt;/p&gt;

&lt;p&gt;주피터노트북으로 텐서플로 실행&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source activate tensorflow
$ (tensorflow)$ jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;종료하는 법
주피터 파일에서 file - close and halt 클릭&lt;/p&gt;

&lt;p&gt;터미널에서 Ctrl + c 해서 종료해야된다.&lt;/p&gt;

&lt;p&gt;참고: http://pinkwink.kr/992&lt;/p&gt;
</description>
        <pubDate>Thu, 31 May 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2018-05-31/howtoinstalljupyter</link>
        <guid isPermaLink="true">http://localhost:4000/2018-05-31/howtoinstalljupyter</guid>
        
        <category>jupyternotebook</category>
        
        <category>tensorflow</category>
        
        <category>anaconda</category>
        
        
      </item>
    
      <item>
        <title>Example Content</title>
        <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas tincidunt ornare nibh, non elementum augue tempus eget. Pellentesque tempus scelerisque iaculis. Nullam interdum ultricies nibh quis sollicitudin. Donec ornare fermentum facilisis. Ut at sem ac sem imperdiet varius a eget tortor. Nam eu augue eget orci semper maximus in eget augue. Mauris ornare, nisl ut suscipit consectetur, mi quam interdum tellus, at rutrum quam eros ultrices mi.&lt;/p&gt;

&lt;h1 id=&quot;headers&quot;&gt;Headers&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;gh&quot;&gt;# H1&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;## H2&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### H3&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;#### H4&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;##### H5&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;###### H6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;h1&quot;&gt;H1&lt;/h1&gt;
&lt;h2 id=&quot;h2&quot;&gt;H2&lt;/h2&gt;
&lt;h3 id=&quot;h3&quot;&gt;H3&lt;/h3&gt;
&lt;h4 id=&quot;h4&quot;&gt;H4&lt;/h4&gt;
&lt;h5 id=&quot;h5&quot;&gt;H5&lt;/h5&gt;
&lt;h6 id=&quot;h6&quot;&gt;H6&lt;/h6&gt;

&lt;h1 id=&quot;text-formatting&quot;&gt;Text formatting&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;gs&quot;&gt;**Bold**&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; _Italics_
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; ~~Strikethrough~~
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;ins&amp;gt;&lt;/span&gt;Underline&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ins&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;sup&amp;gt;&lt;/span&gt;Superscript&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sup&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;sub&amp;gt;&lt;/span&gt;Subscript&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sub&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; Abbreviation: &lt;span class=&quot;nt&quot;&gt;&amp;lt;abbr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HyperText Markup Language&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class=&quot;nt&quot;&gt;&amp;lt;/abbr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; Citation: &lt;span class=&quot;nt&quot;&gt;&amp;lt;cite&amp;gt;&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;&amp;amp;mdash;&lt;/span&gt; Chester How&lt;span class=&quot;nt&quot;&gt;&amp;lt;/cite&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Bold&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Italics&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Strikethrough&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;ins&gt;Underline&lt;/ins&gt;&lt;/li&gt;
  &lt;li&gt;&lt;sup&gt;Superscript&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;&lt;sub&gt;Subscript&lt;/sub&gt;&lt;/li&gt;
  &lt;li&gt;Abbreviation: &lt;abbr title=&quot;HyperText Markup Language&quot;&gt;HTML&lt;/abbr&gt;&lt;/li&gt;
  &lt;li&gt;Citation: &lt;cite&gt;— Chester How&lt;/cite&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;lists&quot;&gt;Lists&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt; Ordered list item 1
&lt;span class=&quot;p&quot;&gt;2.&lt;/span&gt; Ordered list item 2
&lt;span class=&quot;p&quot;&gt;3.&lt;/span&gt; Ordered list item 3
&lt;span class=&quot;p&quot;&gt;
*&lt;/span&gt; Unordered list item 1
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Unordered list item 2
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Unordered list item 3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Ordered list item 1&lt;/li&gt;
  &lt;li&gt;Ordered list item 2&lt;/li&gt;
  &lt;li&gt;Ordered list item 3&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Unordered list item 1&lt;/li&gt;
  &lt;li&gt;Unordered list item 2&lt;/li&gt;
  &lt;li&gt;Unordered list item 3&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;Check out tale on &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GitHub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://github.com/chesterhow/tale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out tale on &lt;a href=&quot;https://github.com/chesterhow/tale&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;images&quot;&gt;Images&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Placeholder image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://placehold.it/800x400&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;&quot;Placeholder image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image with caption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://placehold.it/700x400&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;&quot;Image with caption&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ge&quot;&gt;_This is an image with a caption_&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://placehold.it/800x400&quot; alt=&quot;Placeholder image&quot; title=&quot;Placeholder image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://placehold.it/700x400&quot; alt=&quot;Image with caption&quot; title=&quot;Image with caption&quot; /&gt;
&lt;em&gt;This is an image with a caption&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;code-and-syntax-highlighting&quot;&gt;Code and Syntax Highlighting&lt;/h1&gt;
&lt;p&gt;Use back-ticks for &lt;code class=&quot;highlighter-rouge&quot;&gt;inline code&lt;/code&gt;. Multi-line code snippets are supported too through Pygments.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Sample javascript code&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;JavaScript syntax highlighting&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Sample python code
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Python syntax highlighting&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Adding &lt;code class=&quot;highlighter-rouge&quot;&gt;linenos&lt;/code&gt; to the Pygments tag enables line numbers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Sample javascript code&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;JavaScript syntax highlighting&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;blockquotes&quot;&gt;Blockquotes&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;gt&quot;&gt;&amp;gt; Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;horizontal-rule--line-break&quot;&gt;Horizontal Rule &amp;amp; Line Break&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;Use &lt;span class=&quot;sb&quot;&gt;`&amp;lt;hr&amp;gt;`&lt;/span&gt; for horizontal rules

&lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;

and &lt;span class=&quot;sb&quot;&gt;`&amp;lt;br&amp;gt;`&lt;/span&gt; for line breaks.

&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; for horizontal rules&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br&amp;gt;&lt;/code&gt; for line breaks.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The end&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Mar 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/2017-03-16/example-content</link>
        <guid isPermaLink="true">http://localhost:4000/2017-03-16/example-content</guid>
        
        
      </item>
    
  </channel>
</rss>
